<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>1471-2164-9-S1-S24.fm</title>
<meta name="Author" content="inal.ramadan"/>
<meta name="Creator" content="FrameMaker 7.0"/>
<meta name="Producer" content="Acrobat Distiller 7.0 (Windows)"/>
<meta name="CreationDate" content=""/>
</head>
<body>
<pre>
BMC Genomics

BioMed Central

Open Access

Research

Algorithms to estimate the lower bounds of recombination with or
without recurrent mutations
Xiaoming Liu and Yun-Xin Fu*
Address: Human Genetics Center, School of Public Health, University of Texas at Houston, Houston, Texas 77030, USA
Email: Xiaoming Liu - Xiaoming.Liu@uth.tmc.edu; Yun-Xin Fu* - Yunxin.Fu@uth.tmc.edu
* Corresponding author

from The 2007 International Conference on Bioinformatics & Computational Biology (BIOCOMP'07)
Las Vegas, NV, USA. 25-28 June 2007
Published: 20 March 2008
BMC Genomics 2008, 9(Suppl 1):S24

doi:10.1186/1471-2164-9-S1-S24

<supplement> <title> <p>The 2007 International Conference on Bioinformatics &amp; Computational Biology (BIOCOMP'07)</p> </title> <editor>Jack Y Jang, Mary Qu Yang, Mengxia (Michelle) Zhu, Youping Deng and Hamid R Arabnia</editor> <note>Research</note> </supplement>

This article is available from: http://www.biomedcentral.com/1471-2164/9/S1/S24
© 2008 Liu and Fu; licensee BioMed Central Ltd.
This is an open access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/2.0),
which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.

Abstract
Background: An important method to quantify the effects of recombination on populations is to
estimate the minimum number of recombination events, Rmin, in the history of a DNA sample.
People have focused on estimating the lower bound of Rmin, because it is also a valid lower bound
for the true number of recombination events occurred. Current approaches for estimating the
lower bound are under the assumption of the infinite site model and do not allow for recurrent
mutations. However, recurrent mutations are relatively common in genes with high mutation rates
or mutation hot-spots, such as those in the genomes of bacteria or viruses.
Results: In this paper two new algorithms were proposed for estimating the lower bound of Rmin
under the infinite site model. Their performances were compared to other bounds currently in use.
The new lower bounds were further extended to allow for recurrent mutations. Application of
these methods were demonstrated with two haplotype data sets.
Conclusions: These new algorithms would help to obtain a better estimation of the lower bound
of Rmin under the infinite site model. After extension to allow for recurrent mutations, they can
produce robust estimations with the existence of high mutation rate or mutation hot-spots. They
can also be used to show different combinations of recurrent mutations and recombinations that
can produce the same polymorphic pattern in the sample.

Background
Introduction
Recombination is an important mechanism for shaping
genetic polymorphism. Estimating the effects of recombination on polymorphism plays important roles in population genetics [1]. One direct measure of the amount of
recombination is the minimum number of recombination events in the history of a sample. However, not all

recombination events occurred on the genealogy of a sample can be detected [2]. We can only estimate the minimum number of recombination events, Rmin, which can
be interpreted as, at least how many recombination events
occurred in the history of a sample. Estimating Rmin is by
no means an easy task, so that most of the previous work
focused on the lower bound of Rmin, which is also a valid

Page 1 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

lower bound of the true number of recombination events
occurred.
The seminal work of Hudson and Kaplan [3] introduced a
lower bound on such minimum number, Rm, which is
based on the four-gamete tests under the infinite site
model. For each pair of polymorphic sites, if there are four
distinctive haplotypes (four-gamete), the data is said to be
inconsistent and at least one recombination must occur in
that interval. Assuming all overlapping four-gamete intervals are caused by the same recombination event, Rm is
obtained by counting the total number of non-overlapping four-gamete intervals. Of course, there is a large
chance this assumption does not hold. So Rm can be quite
conservative. Hein and his colleagues [4-6] used dynamic
programming to estimate Rmin, which guarantees that the
true minimum number can be found. Nevertheless, the
computational intensiveness prevents its application to a
moderate number of sequences. Recently, Myers and Griffiths [7] introduced a new method based on combining
recombination bounds of local regions (local bounds) to
estimate a global composite bound of the sample. This
method shows a large improvement over Rm while it is
applicable to moderate to large data sets. Further improvements of local bounds have also been suggested by Song
et al. [8], Lyngsø et al. [9], Song et al. [10] and Bafna and
Bansal [11], which will be discussed in more detail in the
next subsection.
This paper proposes two new improved lower bounds
under the infinite site model and their extension to allow
for recurrent mutations. The performances of these lower
bounds are compared to those of other lower and upper
bounds via simulation. Two real data sets are analyzed to
demonstrate the application of these new bounds.
Approximation algorithms for the bounds are also discussed in this paper.
Previous work on local bound
Myers and Griffiths [7] introduced two new local bounds
under the infinite site model and one method to combine
them into a global bound. The basic idea is that, since the
algorithms available perform better on a sample of
sequences with small number of polymorphic loci than
on that with large number of loci, we can cut the
sequences into small segments, estimate the lower bound
of each segment and then combine them into a global
bound for the whole sequences. It is easy to understand
that a better local bound would improve the estimation of
Rmin when combined. In this subsection we summary the
previous work on local bounds, and in next section we
propose our new algorithms on improving and extending
the estimation of local bounds.

http://www.biomedcentral.com/1471-2164/9/S1/S24

To discuss the problem of local bound formally, let us
assume a matrix M with n rows and m columns. Each row
represents a sequence or haplotype and each column represents a polymorphic site. We further assume that there
are only two allele types, say 0 and 1, at each polymorphic
site, which is the most common case for SNPs. Given a set
of sequences, an allele type is called mutation if that type
has only one copy in the set; a polymorphic site is called
informative if each allele type of this site has more than
one copy in the set. A local bound is a lower bound of the
number of recombination events occurred in the
unknown history of the sequences in M.
The local bound Rh by Myers and Griffiths [7] is called a
haplotype bound. It is based on the observation of the
haplotype number change on an ancestral recombination
graph (ARG) [12]. The original algorithm Myers and Griffiths [7] provided is a heuristic search algorithm. Song et
al. [8] described an algorithm based on an integer linear
programming to compute the optimal Rh- Bafna and
Bansal [11] suggested another local bound estimator, Rg,
which is an approximation of Rh calculated with a greedy
search algorithm. The local bound Rs by Myers and Griffiths [7] is estimated through tracing the history of the
sample, which is similar to that of coalescent simulation.
However, the specific topology and length of the branch
are ignored. Myers and Griffiths [7] showed in their paper
Rs ≥ Rh ≥ Rm when their global bounds were compared.
Bafna and Bansal [11] proposed a faster algorithm for
computing Rs (Figure 1), which views the history of the
sequences prospective in time other than retrospective in
time as the original algorithm. Given a history, there is a
particular order of sequences associated with the history
(see Figure 2 (a) for an example). Assume the order is
r1,r2,r3, …, where rj represents a sequence with rank j, then
all ri with i < j are potential ancestor sequences of rj. Let set
m = {r1, r2, … , rj} and m−j = {r1, r2, … , rj−1}. Regarding
the informative sites of m only (that is, ignoring mutations), if rj is identical to any sequences in m−j (i.e. redundant), rj can be derived from m−j via only mutations;
otherwise at least one recombination event is needed. The
algorithm adds sequences one by one following a particular order. Whenever a new sequence added is not redundant, the algorithm counts one recombination. After all
possible orders of sequences are examined, the smallest
count of an order is regarded as Rs. Of course, when a nonredundant sequence added, counting only one recombination event is quite conservative. Lyngsø et al. [9] suggested a branch and bound search of the exact position of
crossovers on the ancestral sequence to produce a true
ARG. Song et al. [10] further extended the method to
allow for gene conversion events. Alternatively, Bafna and
Bansal [11] introduced an algorithm for computing the
minimum number of recombination events, Ij[m−j],

Page 2 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

http://www.biomedcentral.com/1471-2164/9/S1/S24

⎧∞
⎪
I[c , h] = ⎨0
⎪I
⎩ min

if j[c] ≠ h[c]
if j[c] = h[c] and c = 1
if j[c] = h[c] and c > 1

ticular (adding) order of the sequences, where 0 and 1 represent the two alleles on each site. The sequences in the
boxes with solid lines are presented in the sample while
those in the boxes with dashed lines are recombination
intermediates. Figure 2(b) is an example showing the

00000

needed to obtain a recombinant j given a set, m−j, of its
possible ancestors. The the crucial part of the algorithm is
computing the recurrence

where

00101

}

11000

h ′≠ h

h [c] represents the allele type of sequence h at site c and
j[c] ≠ h[c] is true only when the two allele types are not
missing and different to each other. I [c, h] can be interpreted the minimum number of recombinations needed
to explain the first c informative sites of sequence j with h
[c] as the parent of j [c]. Then

11101
11111

I j ⎡m− j ⎤ = minh {I[ s ,h]} , h ∈ m− j ,
⎣
⎦
where s is the number of informative sites of sequences in
set m = m-j ∪ j.

00011

I[m−j] can be larger than one if more than one recombination is needed to produce sequence j. In such situations,
some recombination products are not presented in the
sample and are called recombination intermediates [11].
Figure 2(a) presents a genealogy of the sequences with
their top-down vertical positions corresponding to a par-

01101 = j

∞

∞
∞

∞

1

∞
∞

0

0

∞
∞

∞

∞

1

1

1

´ µ

2

1

∞

1

∞
0

∞
0
0

c \ h
1
2
3
4
5

Figure 1
Bafna and Bansal's algorithm for Rs
Bafna and Bansal's algorithm for Rs.

2

Rs,j [m] = 1 + Rs [m−j ]
Rs [m] = Ñ Òj {Rs,j [m−j ]}¸j ∈ m
Ö ØÙÖÒ Rs [M ]

3

Rs,j [m] = Rs [m−j ]

Ð×

4

ÓÖ ÐÐ ×Ù × Ø m Ó i × ÕÙ Ò × ÖÓÑ M
× ÕÙ Ò j ∈ m Ò × Ö ÙÒ ÒØ

5

] h ,c [ I

× ÖÓÑ M

:

i × ÕÙ Ò

m

Ý Ö ÑÓÚ Ò × ÕÙ Ò

−

× Ò M

j

×

⎭
⎩
⎪ 10011⎪
⎪
⎪
⎪ 11111⎪
⎬11000 ⎨ =
⎪
⎪
⎪
⎪
⎪ 00101⎪
⎫ 00000⎧

Rs [m] = 0
ÓÖ i = 4 ØÓ n

ÕÙ Ò

01101

Rs

10011

ÓÑÔÙØ

ÒÔÙØ Ë Ø M Ó ÐÐ ×
Ö ØÙÖÒ Rs
ÐÓ Ð Ú Ö
Ð
n ÒÙÑ Ö Ó × ÕÙ Ò
m
×Ù × Ø Ó M
×Ù × Ø Ó m
m−j
ÓÖ i = 1 ØÓ 3
ÓÖ ÐÐ ×Ù × Ø m Ó

´ µ

2

{

Imin = min I[c − 1, h],min {1 + I[c − 1, h ’]} ,

tation of2Ij [m− (b)
An example ofj]recombination intermediates (a) and compuFigure
An example of recombination intermediates (a) and computation of Ij [m−j] (b).

Page 3 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

computation of Ij [m−j] with j = 10110 and m−j = {00000,
10100, 00011, 11111, 11001} as in Figure 2(a), where
arrows show how the final value two is obtained.
In Bafna and Bansal's [11] prospective algorithm for Rs
(Figure 1), each time when a recombinant is added, one is
added to the count of recombination events. At first
glance, we can just replace one by Ij [m−j]. However, since
the recombinant intermediates are unknown, it is possible some of them are parents of other sequences in the
sample. So that the same recombination events may be
counted more than once when adding these daughter
sequences, which violates the definition of lower bound.
Although this quantity is no longer a lower bound, it is
still informative. Song et al. [8] named it Ru, as the upper
bound of Rmin, which can be interpreted as at least how
many recombination events are enough to obtain the
sample. To avoid counting any recombination intermediate more than once, Bafna and Bansal [11] introduced the
concepts of direct witness and indirect witness of a recombination event. A sequence is a direct witness if it is the
direct product of a recombination, i.e. recombinant. A
sequence is an indirect witness if it is derived from a
recombinant via mutations. For example, in Figure 2(a)
11111 is an indirect witness and 10110 is a direct witness.
Based on that they proposed the algorithm of RI which
adds the minimum number of recombination intermediates of only one direct witness to the total count of recombination events, which avoids multiple counting of
recombination intermediates and make RI a valid lower
bound [11]. The original algorithms for Ru and RI approximate the quantities over all possible orders of sequences
[8,11]. Algorithms A.1 and A.2 in Appendices A show the
corresponding Ru and RI for a particular order of
sequences, which is useful when only a small set of orders
need to be examined. Here is an example to compute Ru
and RI. In Figure 2(a) the unobserved recombinant intermediate 10111 produces both 11111 and 10110 in the
sample. Suppose the order of the sequences is 00000,
10100, 00011, 11111, 11001 and 10110 according to
their vertical positions in the figure. With this particular
order, we obtain Ru = 5, because other than the two
recombinations counted for 11001 and one for 11111,
two more recombination events are needed to explain
10110 (Figure 2(b)), which can also be regarded as an
additional count of the recombinant intermediate 10111.
For the particular order of sequences in Figure 2(a), RI = 3.

Results and discussion
Improved lower bounds under the infinite site model
In Bafna and Bansal [11]'s original algorithm for RI, the
counting of the number direct witnesses and the counting
of total number of recombination are independent to
each other and may not correspond to the same order of
the sequences. However, a particular order of sequence is

http://www.biomedcentral.com/1471-2164/9/S1/S24

associated to an ARG, which is very informative itself.
Here we propose a modified lower bound called Ro to
overcome this disadvantage. The “o” in Ro stands for
order, which counts the number direct witnesses and the
total number of recombinations depending on the same
order of sequences. The detailed steps are presented in Figure 3 (and Algorithm A.2 in Appendices A for a fixed order
of sequences).
It is easy to understand that all the difficulties of counting
the minimum number of recombination events are due to
the fact that all recombination intermediates are
unknown. Ideally, if in the process of computing Rs or RI,
when adding a recombinant j to m−j, we also add its
recombinant intermediates leading to j, the true Rmin can
be obtained. It seems straightforward to recover the
recombinant intermediates simply by tracing the “path”
leading to the final Ij [m−j], just as the arrows displayed in
Figure 2(b). However, this strategy could be very inefficient because typically there will be multiple paths to the
same Ij [m—j] so that many possible recombination intermediates. Although some of the intermediates may be
redundant, the possible number of distinctive intermediates may still be large. In the case of Figure 2(b), four different paths lead to the same final value of two, each with
two break points. There are a total of three distinctive
intermediates, 1011*, ***10 and **110, where * represents a site that is not the ancestor of the corresponding
site of sequence j, so that its allele type is not of interest.
To find the final lower bound, one needs to store all possible combinations of recombinant intermediates as augmented sequences in a set, say m′, at each step of adding a
recombinant. Each m′ will be used as the possible parent

ÓÑÔÙØ

Ro

ÒÔÙØ Ë Ø M Ó ÐÐ × ÕÙ Ò ×
Ö ØÙÖÒ Ro
ÐÓ Ð Ú Ö
Ð
n ÒÙÑ Ö Ó × ÕÙ Ò × Ò M
m
×Ù × Ø Ó M
×Ù × Ø Ó m Ý Ö ÑÓÚ Ò × ÕÙ Ò
m−j
ÓÖ i = 1 ØÓ 3
ÓÖ ÐÐ ×Ù × Ø m Ó i × ÕÙ Ò × ÖÓÑ M
Rd [m] = 0¸ Ro [m] = 0
ÓÖ i = 4 ØÓ n
ÓÖ ÐÐ ×Ù × Ø m Ó i × ÕÙ Ò × ÖÓÑ M
× ÕÙ Ò j ∈ m Ò × Ö ÙÒ ÒØ

j

Rd,j [m] = Rd [m−j ]
Ro,j [m] = Ro [m−j ]

Ð×

Rd,j [m] = 1 + Rd [m−j ]
Ro,j [m] = max {1 + Ro [m−j ] , Rd [m−j ] + Ij [m−j ]}
Ro [m] = Ñ Òj {Ro,j [m−j ]}¸j ∈ m
Rd [m] = Ñ Òj {Rd,j [m−j ]}¸j ∈ m¸j ×ºØº Ro,j [m−j ] = Ro [m]
Ö ØÙÖÒ Ro [M ]

Figure 3
An algorithm for computing Ro
An algorithm for computing Ro.

Page 4 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

sequences when adding the next recombinant. The
number of m′ can grow exponentially at each step of adding a recombinant, so does the computational time. Alternatively, we can make a compromise by adding some, but
not all, recombinant intermediates.
One immediate candidate is the hypothetical parent
sequence of an indirect witness. If only one new mutation
is introduced to m from an indirect witness j, a hypothetical parent sequence of j is formed by replacing the mutant
allele on the mutation site with the “wild-type” allele presented in all sequences in m−j. For example, in Figure 2(a)
the hypothetical parent sequence of 11111 is 10111. If
more than one new mutation is presented in j, a hypothetical parent sequence of j is formed by replacing all the
mutant alleles with a missing data '?', which can be either
the mutant allele or the “wild-type” allele. Based on this,
here we propose another improvement over RI, which is
called Ra. The “a” in Ra stands for augmentation, which
augments the hypothetical parent sequences of indirect
witnesses into the sample during the process. The detailed
steps are presented in Figure 4. The algorithm (Algorithm
A.3) and a proof (as a valid lower bound) for Ra with a
particular order of sequences are given in Appendices A
and B, respectively. As to the example in Figure 2(a), Algorithm A.3 recovers the recombination intermediate 10111
and Ra = 4, which equals to the true number of recombination events presented.

ÓÑÔÙØ

Ra

ÒÔÙØ Ë Ø M Ó ÐÐ × ÕÙ Ò ×
Ö ØÙÖÒ Ra
ÐÓ Ð Ú Ö
Ð
n ÒÙÑ Ö Ó × ÕÙ Ò × Ò M
×Ù × Ø Ó M
m
Ò Ù Ñ ÒØ × ÕÙ Ò × Ø Ó m
m
m−j
×Ù × Ø Ó m Ý Ö ÑÓÚ Ò × ÕÙ Ò j
ÝÔÓØ Ø
Ð Ô Ö ÒØ × ÕÙ Ò Ó × ÕÙ Ò j
pj
ÓÖ i = 1 ØÓ 3
ÓÖ ÐÐ ×Ù × Ø m Ó i × ÕÙ Ò × ÖÓÑ M
m = φ¸ Rd [m] = 0¸ Ra [m] = 0
ÓÖ i = 4 ØÓ n
ÓÖ ÐÐ ×Ù × Ø m Ó i × ÕÙ Ò × ÖÓÑ M
× ÕÙ Ò j ∈ m Ò × Ö ÙÒ ÒØ Ò m ∪ m
m = m−j ¸ Rd,j [m] = Rd [m−j ]¸ Ra,j [m] = Ra [m−j ]
Ð×

http://www.biomedcentral.com/1471-2164/9/S1/S24

Extension to allow for recurrent mutations
The lower bounds developed under the infinite site model
assume all polymorphic inconsistencies are caused by
recombination. However, recurrent mutations, commonly observed on mutation hot-spots, also can cause
inconsistency. There is a difference though. The former is
more likely to affect a long range of sites because a segment of DNA was involved in recombination. On the
other hand, recurrent mutation occurs one site at a time,
so that it is unlikely to observe inconsistent sites clustering
together in a long range. This difference has been used to
detect recombination and find breakpoints [1,13]. However, the difference is by no means clear-cut, especially
when SNP data other than sequence data is used, some
information of the spacial inconsistent pattern is lost. As
a result, it is difficult to distinguish recombination from
recurrent mutations. Nevertheless, it is informative to give
a conservative estimation of the upper and lower bounds
of Rmin with the consideration of recurrent mutations.

This can be done by extending I [c, h], which can be
regarded as the minimum cost if h [c] is the parent of j [c].
In its recurrence, if j [c] ≠ h[c], I [c, h] = ∞. This is due to
the fact that if j [c] ≠ h [c] and h [c] is the parent of j [c],
then i [c] must be produced by a recurrent mutation on
that site, which is not allowed under the infinite site
model. So that, the computation of I [c, h] is a dynamic
programming process which assigns a cost of ∞ to a recurrent mutation and 1 to a recombination, and minimizes
the cost of all informative sites of sequence j. This minimum cost is also the minimum number of recombination
events, since only recombination is allowed and each
costs 1.
To allow for recurrent mutations, we can simply assign a
cost other than ∞ to it. Assume the costs of recombination
and recurrent mutation are cr and cm, respectively, then
replace I [c, h] with I′ [c, h] as

⎧0
⎪c
⎪
I ′[c , h] = ⎨ m
′
⎪Imin
⎪Imin + cm
⎩′

Rd,j [m] = 1 + Rd [m−j ]

Ra,j [m] =max 1 + Ra [m−j ] , Rd [m−j ] + Ij m−j ∪ m−j
Ra [m] = Ñ Òj {Ra,j [m−j ]}¸j ∈ m
j = Ö Ñ Òj {Rd,j [m−j ]}¸j ∈ m¸j ×ºØº Ra,j [m−j ] = Ra [m]
Rd [m] = Rd,j

× ÕÙ Ò

m−j

j ×
m = m ∪ pj
Ö ØÙÖÒ Ra [M ]

Ò Ò

Figure 4
An algorithm for computing Ra
An algorithm for computing Ra.

Ö

Ø Û ØÒ ××

if j[c] = h[c] and c = 1
if j[c] ≠ h[c] and c = 1
if j[c] = h[c] and c > 1
if j[c] ≠ h[c] and c > 1

where

{

}

′
Imin = min I ′[c − 1, h],min {c r + I ′ [c − 1, h′]} .
h ′≠ h

Again we minimize the total costs of all sites of sequence
j. Then Ij[m−j] records the number of recombinations
(along with the number of recurrent mutations) that gives
the minimum I′ [s, h] of all h ∈ m−j. Song et al. [10] used
a similar approach to incorporate gene conversion event

Page 5 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

into their search algorithm for the lower and upper
bounds of Rmin.
This simple extension can be easily applied to RI, Ro, Ra
and Ru since they all use the quantity Ij [m−j]. With this
extension, they will be presented as Rfi (cm, cr), Rfo (cm, cr),
Rfa (cm, cr) and Rfu (cm, cr). We can allow different number
of continuous recurrent mutations with different combinations of cr and cm. For example, the procedure with cm =
3 and cr = 2 will prefer one recurrent mutation than a double recombination crossover (gene conversion) at a single
inconsistent site, but will prefer a double crossover than
two or more recurrent mutations at continuous sites. So
that cm = 3 and cr = 2 can be used as a conservative lower
bound of Rmin with the assumption that a small number
of mutation hot-spots are present and distributed evenly
on the sequence. If per bp recombination rate (r) and
mutation rate (μ) are known, the procedure with cm = lg μ
and cr = lgr will find the maximum likelihood estimation
of the number of recombination events. We need to be
careful about the interpretation of these extended bounds.
They are just conservative estimations of the corresponding lower or upper bounds under the infinite site model.
Another usage of this extension is to show what combination of recurrent mutations and recombinations can produce the same observed inconsistency. The lower and
upper bounds under the infinite site model are of one
extreme, which show the minimum number of recombination events required to produce the pattern if there is no
recurrent mutations. The maximum parsimony tree
method used in the phylogenetic study is of another
extreme, which shows the minimum number of recurrent
mutations needed to produce the pattern if there is no
recombination. Because a byproduct of Rfo (cm, cr) and Rfu
(cm, cr) is the fully determined number of recurrent mutations associated with a particular order, which can be used
to show different combinations of recurrent mutations
and recombinations that can produce the same polymorphic pattern. We will show this usage in Examples.
Performance comparison
To compare the performances of these lower bounds, we
conducted coalescent simulations to generate samples
and then obtained estimations from the bounds. To simulate a sample, we assumed the values of two crucial population parameters, population mutation rate θ = 4N μ
and population recombination rate ρ = 4Nr, where N is
the effective population size and μ and r are mutation rate
and recombination rate per gene per generation, respectively. With different combinations of θ (θ=5, 10, 20, 50,
100) and ρ (ρ=0, 1, 5, 10, 20, 50, 100), 10,000 independent samples were simulated with sample size n = 10. The
ms program [14] was used to conduct the simulation.

http://www.biomedcentral.com/1471-2164/9/S1/S24

To study the performances of the local bounds under the
finite site model, we used the ms program to simulate
gene genealogies and then used the Seq-Gen program [15]
to simulate DNA sequences with 2501bp in length given
these gene genealogies. For each simulation a Kimura 2parameter model [16] was used with a large transition to
transversion ratio, which made each site only had two
alleles so that the bounds developed under the infinite
site model can also be computed. For each combination
of θ and ρ, 10,000 samples were simulated.
Figure 5(a)–5(d) compare the means of several lower
bounds, Rm, Rg, Rs, RI, Ro, Ra and an upper bound Ru with
increasing ρ (θ = 5 and 10) under the infinite site model.
Rfi (3, 2), Rfo (3, 2), Rfa (3, 2) and Rfu (3, 2) were also computed and compared with the same simulated data. These
results showed that Rfi (3, 2), Rfo (3, 2), Rfa (3, 2) and Rfu
(3, 2) were slightly conservative (but still informative)
under the infinite site model. For all bounds except Rm,
composite bounds were better than the corresponding
local bounds and a better local bound always led to a better composite bound. As to all the composite bounds, the
ranks of performance were Ra ≥ Ro ≥ RI ≥ Rs ≥ Rg ≥ Rm in
most cases. The differences between Ro, RI and Rs were
small. Ro had the same computational efficiency as RI but
with a slightly improved estimation. If θ and ρ were not
very large, at most of the time, the difference between Ra
and Ru was quite small. Since Ra and Ru are lower and
upper bounds of Rmin, Ra = Ru means Rmin is found. Even
when they are not equal, if their difference is small, we can
still obtain an informative interval where Rmin is located.
Figure 5(e) and 5(f) show the increase of the means of
local bounds with increasing θ and relative small ρ. Obviously, increasing θ will produce more polymorphic sites
in DNA samples and increase the power to detect ancient
recombination events. But the results showed that the
power increase became slower when θ >> ρ due to the fact
that the limit of the lower bounds is determined by Rmin.
Figure 6(a) shows the increase of local bounds with the
increase of θ without recombination (ρ = 0) under the
finite site model. The results can be summarized as follows. Even with ρ = 0, the increased number of recurrent
mutations with the increase of θ produced false positive
signals of recombination events. All the bounds assuming
the infinite site model were not robust to recurrent mutations, especially Ru and Rm. On the other hand, the
bounds with cm = 3 and cr = 2 showed good robustness to
recurrent mutations. Figure 6(b) and 6(c) show the effects
of mutation hot-spots on the local bounds with ρ = 0. A
mutation hot-spot was simulated by randomly superimposing a site with a 100 fold mutation rate per site as that
of the sequence on average. The θs shown in Figure 6(b)
and 6(c) were those of the sequences before superimposing hot-spots. Again, the bounds with cm = 3 and cr = 2

Page 6 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

http://www.biomedcentral.com/1471-2164/9/S1/S24

´ µ

´ µ

´ µ

´ µ

´ µ

´ µ

Performance comparison of local bounds (a, c, e, f) and composite bounds (b, d) under the infinite site model (n = 10)
Figure 5
Performance comparison of local bounds (a, c, e, f) and composite bounds (b, d) under the infinite site model
(n = 10). (a): local bounds, θ (a): local bounds, θ = 5. (b): composite bounds, θ = 5. (c): local bounds, θ = 10. (d): composite
bounds, 6θ= 10. (e): local bounds, ρ = 1. (f): local bounds, ρ = 5.

Page 7 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

http://www.biomedcentral.com/1471-2164/9/S1/S24

Table 1: Local and composite bounds for the Adh data set.
cm

cr

Nm

Rm

Rg

Rs

RI

Ro

Ra

Ru

∞
3
3
3
3

1
2
4
5
7

0
1
2
3
4

5[5]

2[6]

3[6]

4[7]
3
1
1
0

4[7]
3(2)
1(8)
1(8)
0(11)

5[7]
4
0
0
0

7
4(2)
1(8)
1(8)
0(11)

cm = ∞ and cr = 1 corresponds to the infinite site model. Nm stands for
the number of continuous recurrent mutations allowed. The numbers
outside the brackets are local bounds. The numbers in square
brackets are composite bounds. The numbers in round brackets are
numbers of recurrent mutations associated with the corresponding
number of recombinations.

´ µ

´ µ

´ µ

Figure=65 (b) or θ = 10 ratesρ(a) 0, n= 10)
with θ
Effects of high mutation (c) ( = and mutation hot-spots
Effects of high mutation rates (a) and mutation hot-spots
with θ = 5 (b) or θ = 10 (c) (ρ = 0, n= 10)

were more robust to mutation hot-spots than those
assuming the infinite site model.

Examples
Recombination analysis of the Adh gene locus
Kreitman [17] sequenced 11 Drosophila melanogaster alcohol dehydrogenase (Adh) genes from five natural populations and found 43 SNPs excluding insertion/deletions.
This data set has become a benchmark for recombination
analysis. Song and Hein [6,18] concluded that the exact
number of Rmin equals seven. We applied the upper and
lower bounds to this data set with or without extension to
allow for recurrent mutations.

The results (Table 1) showed that under the infinite site
model, the composite bounds of RI, Ro, Ra and Ru all equal
seven. To be more conservative and consider the effects of
recurrent mutations, we manipulated the costs of recurrent mutations and recombinations such as those shown
in Table 1, which allow for one, two, three and four continuous recurrent mutations. The results of Rfo (cm, cr) and
Rfu (cm, cr) suggested that the same data could also be
explained by three or four recombinations with two recurrent mutations, or one recombination with eight recurrent
mutations, or 11 recurrent mutations exclusively.
Recombination analysis of the human LPL locus
Nickerson et al. [19] sequenced a 9.7 kb genomic DNA
from the human lipoprotein lipase (LPL) gene with a total
of 142 chromosomes from three populations (Jackson,
North Karelia and Rochester). The amount of recombination detectable in this data was previously analyzed by
Clark et al. [20] and then by Templeton et al. [21]. However, the conclusions drawn from these two studies were
quite different. Templeton et al. [21] used a parsimonybased method to infer the minimum number of recombinations and found 29 recombination events clustering
approximately at the center region of the sequence. They
suggested this could be due to an elevated rate of recombination at that region. But Clark et al. [20] applied Rm to
the data and found no strong clustering of recombinations, which can be explained by false positives caused by
recurrent mutations [21] or lack of power [7]. With the
development of new methods for lower bounds, this data

Page 8 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

http://www.biomedcentral.com/1471-2164/9/S1/S24

´ µ

´ µ

´ µ

´ µ

´ µ

´ µ

´ µ

´ µ

Figure 7 of Ra (a, c, e, g) and Rfa (3, 2) (b, d, f, h) per bp along LPL haplotypes
Distribution
Distribution of Ra (a, c, e, g) and Rfa (3, 2) (b, d, f, h) per bp along LPL haplotypes. (a): Jackson population, Ra. (b):
Jackson population, Rfa (3, 2). (c): North Karelia population, Ra. (d): North Karelia population, Rfa (3, 2). (e): Rochester population, Ra. (f): Rochester population, Rfa (3, 2). (g): combined population, Ra. (h): combined population, Rfa (3,2). Dashed line and
dotted line represent 95% and 99% significance level, respectively.

Page 9 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

has been analyzed by different authors in recent years.
Some [11] supported the clustering of recombinations
while others [7,8] did not.
We applied Ra and Rfa (3, 2) to the data with all insertion/
deletions removed. In detail, first we calculated the local
bounds of Ra and Rfa (3, 2) for all continuous subsets of
polymorphic loci that can distinguish less than or equal to
15 distinctive haplotypes in the data. Then approximate
composite bounds (see Discussion) of Ra and Rfa (3, 2)
were calculated. For each pair of loci if their distance is
larger than 500bp but less than 5kb, the estimated
number of recombination events was divided by the distance and recorded as an estimation of the Ra or Rfa (3, 2)
per bp, which is shown in Figure 7 as a histogram at the
center of that region. Similar procedures have shown to be
successful in discovering the true positions of recombination hot-spots [11].
To test the significance of possible recombination hotspots, we used simulation to determine the significance
level of the maximum of Ra or Rfa (3, 2) per bp. We
assumed that Ra or Rfa (3, 2) per bp follows a Poisson distribution with a mean estimated from the Ra or Rfa (3, 2)
of the whole gene. Then we simulated Ra or Rfa (3, 2) for
each pair of continuous loci and calculated the average Ra
or Rfa (3, 2) per bp for each pair of loci that with a distance
between 500bp and 5kb. This procedure was replicated
10,000 times and the empirical distribution of the maximum of Ra or Rfa (3, 2) per bp was obtained. Figure 7 (a,
c, e, g) shows that Ra per bp increased at the center of the
sequences in the North Karelia and Rochester populations
(significant at the 95% level), but this trend was less obvious (statistically not significant) in the Jackson population or the combined population. We used Rfa (3, 2)
instead of Ra to make a conservative measure of the
amount of recombinations. The pattern remained but the
high peaks of Rfa (3, 2) in North Karelia population and
Rochester population were no longer statistically significant (Figure 7 (b, d, f, h)). This result suggested that those
possible false positives produced by recurrent mutations
may indeed cause the clustering pattern, other than disperse it.

http://www.biomedcentral.com/1471-2164/9/S1/S24

this fixed order such as Algorithm A.2 or A.3. Record it as
Rold. Then we randomly replace the positions of two
sequences (a flip) to form a new order and compute R
with the new order again. Repeat k times and we take the
minimum of these k new estimations of R as Rnew. If Rnew ≥
Rold, stop. Otherwise, replace Rold with Rnew and begin
another round of k flips from the new order that produced
Rnew. Repeat this procedure until Rnew ≥ Rold. Then this Rold
is an approximation of R with dynamic programming.
Then we restart the hill-climbing with another random
order and repeat m times. The minimum of all estimations
is taken as a result. Note that the heuristic approximation
of Ru is still a valid upper bound, but that of any lower
bound may not be a valid lower bound.
Other than using the heuristic search algorithm described
above to approximate local bound, we can also approximate the composite bound, e.g. only the local bounds on
all continuous regions with m or less sites are computed
and used to estimate the composite bound. With the limit
of sites, the number of haplotypes for the local bounds is
also limited so that it prevents the need for large computational complexity. Alternatively, one can directly set a
limit on the number of haplotypes used to compute the
local bounds. The rational behind this procedure is that
the information of the local recombination event between
two sites sl and sl+1 is mostly contained in sites that are
closely linked to them. The sites far away from sl and sl+1
contain little information so that adding those sites has
little contribution to the composite bound.

Conclusions
In summary, the contributions of this research are several
algorithms for estimating the lower bound of the minimum number of recombination events in the history of a
sample. These new lower bounds are shown to be better
than existing ones under the infinite site model. Furthermore, they are extended to allow for recurrent mutations,
which are robust to high mutation rates and mutation
hot-spots. These extended bounds can be used as a conservative measure of the amount of recombination or can
be used to show different combinations of recombination
and recurrent mutations that can produce the same polymorphic pattern in the sample.

Discussion
Although the dynamic programming algorithm used in
Rs, RI, Ro, Ra and Ru is a significant improvement over the
original algorithm proposed by Myers and Griffiths [7], it
can be quite slow when the number of haplotypes is large.
Alternatively, we can use a heuristic search algorithm to
approximate the local bound. Random-restart hill-climbing is a widely used heuristic search algorithm in artificial
intelligence [22]. The basic idea of hill-climbing is as follows. We begin with a random order of the sequences,
then we compute a local bound R (Rs, RI, Ro, Ra or Ru) with

List of abbreviations used
ARG: ancestral recombination graph
Adh: alcohol dehydrogenase
LPL: lipoprotein lipase

Competing interests
The authors declare that they have no competing interests.

Page 10 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

Authors contributions

http://www.biomedcentral.com/1471-2164/9/S1/S24

local variable:

XL participated in the design of the study, carried out the
algorithm development and testing, and drafted the manuscript. YF conceived of the study, participated in its
design and helped to draft the manuscript.

m: a subset of M

All authors read and approved the final manuscript.

m−j: a subset of m by removing sequence j

Appendices A: Algorithms

for i = 1 to 3

Algorithm A.1 An algorithm for computing Ru with fixed
order

subset m =first i sequences of M

Compute_RM with fixed order

Rd[m]=0, RI[m]=0

input: Set M of all sequences

for i = 4 to n

return: Ru

subset m =first i sequences of M

local variable:

if sequence i is redundant

n: number of sequences in M

Rd [m] = Rd [m−i]

m: a subset of M

RI [m] = RI [m−j]

m−j: a subset of m by removing sequence j

else

for i = 1 to 3

Rd [m] = A [m−l] + Rd [m−i]

subset m =first i sequences of M

RI [m] = max{l + RI [m−i], Rd [m−i] + Ii [m−i]}

Ru [m] = 0

return RI [M]

for i = 4 to n

Algorithm A.3 An algorithm for computing Ra with fixed
order

n: number of sequences in M

subset m =first i sequences of M
Compute_Ra with fixed order
if sequence i is redundant
input: Set M of all sequences
Ru [m] = Ru[m−i]
return: Ra
else
local variable:
Ru [m] = Ii [m−i] + Ru [m−i]
n: number of sequences in M
return Ru [M]
m: a subset of M
Algorithm A.2 An algorithm for computing RI or Ro with
fixed order

m′: an augmented sequence set of m

Compute_RI or Ro with fixed order

m_j: a subset of m by removing sequence j

input: Set M of all sequences

pj: hypothetical parent sequence of sequence j

return: RI

for i = 1 to 3

Page 11 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

subset m =first i sequences of M
m′ =ø, Rd[m] = 0, Ra[m] = 0
for i = 4 to n
subset m =first i sequences of M
if sequence i is redundant in m ∪ m′

http://www.biomedcentral.com/1471-2164/9/S1/S24

thank Sara Barton for assistance with manuscript preparation. This work
was supported by NIH grant number 5R01 GM50428-09 and 5R01
GM60777-04 to Yun-Xin Fu.
This article has been published as part of BMC Genomics Volume 9 Supplement 1, 2008: The 2007 International Conference on Bioinformatics &
Computational Biology (BIOCOMP'07). The full contents of the supplement are available online at http://www.biomedcentral.com/1471-2164/
9?issue=S1.

References
m′ = m′−i, Rd [m] = Rd [m−i], Ra [m] = Ra [m−i]
else
′
Ra [m] = max {1 + Ra [m−i ], Rd [m−i ] + Ii [m−i ∪ m−i ]}
R [m] = 1 + R ⎡m−i ⎤
d
d⎣ ⎦
if sequence i is an indirect witness

1.

2.
3.
4.

m′ = m′ ∪ pi

5.

return Ra [M]

6.

Appendix B: Proof of Ra as a lower bound

Here we present a simple proof for Algorithm A.3 as a
valid lower bound. Bafna and Bansal [11] has proved that
RI is a valid lower bound of Rmin given a particular order of
the sequences. This conclusion is true not only when all
recombination intermediates are unknown, but also in
the case if some “true” recombination intermediates are
recovered in the order. If an indirect witness j introduces
exactly one mutation into sequence set m, then forming a
pj (the hypothetical parent sequence of j) by replacing the
mutant allele with the “wild-type” allele of that site will
recover the last recombination intermediate (LRI) that
leads to j via one mutation. For example, in Figure 2(a),
the LRI of indirect witness 11111 is 10111. If an indirect
witness j introduces n (n ≥ 2) mutations into sequence set
m, there are multiple possible LRIs of j but only one of
them is the “true” LRI. However, if we form a pj by replacing the alleles on the mutant sites of the true LRI with
missing data, Ij[m-j ∪ pj] must be less than or equal to Ij[m−
j ∪ true LRI of j], since in calculating I[c, h] a missing data
is never regarded as different to any alleles. Similarly,
Ik[m−j ∪ pj ∪ Sk] must be less than or equal to Ik[m−j ∪ true
LRI of j ∪ Sk], where k is a possible offspring of j and Sk is
a set of other possible parent sequences of k. So that, by
augmenting the pj and then follow the procedure of RI we
can get an estimation less than or equal to that with augmenting true LRIs. Then the procedure (Ra) must produce
a valid lower bound.

7.
8.

9.

10.

11.
12.

13.
14.
15.
16.
17.
18.

Acknowledgements
We thank Vikas Bansal for kindly providing their program for RI and many
instructive discussions on estimating the lower bounds. We thank Dr.
Andrew Clark for kindly providing the haplotype data of the LPL gene. We

Crandall KA, Templeton AR: Statistical Approaches to Detecting Recombination. In The Evolution of HIV Edited by: Edited by
Crandall KA, Baltimore, Maryland. The John Hopkins University Press;
1999:153-176.
Stumpf MPH, McVean GAT: Estimating recombination rates
from population-genetic data.
Nat Rev Genet 2003,
4(12):959-968.
Hudson RR, Kaplan NL: Statistical properties of the number of
recombination events in the history of a sample of DNA
sequences. Genetics 1985, 111:147-164.
Hein J: Reconstructing evolution of sequences subject to
recombination using parsimony.
Math Biosci 1990,
98(2):185-200.
Hein J: A heuristic method to reconstruct the history of
sequences subject to recombination.
J Mol Evol 1993,
36:396-405.
Song YS, Hein J: Constructing minimal ancestral recombination graphs. J Comput Biol 2005, 12(2):147-169.
Myers SR, Griffiths RC: Bounds on the minimum number of
recombination events in a sample history. Genetics 2003,
163:375-394.
Song YS, Wu Y, Gusfield D: Efficient computation of close lower
and upper bounds on the minimum number of recombinations in biological sequence evolution.
Bioinformatics
2005:i413-i422.
Lyngsø R, Song Y, Hein J: Minimum Recombination Histories by
Branch and Bound. In Proceedings of Workshop on Algorithms in Bioinformatics 2005, Volume 3692 of Lecture Notes in Computer Science
Edited by: Edited by Casadio R, Myers G,. Springer-Verlag; 2005:239-250.
Song YS, Ding Z, Gusfield D, Langley CH, Wu Y: Algorithms to Distinguish the Role of Gene-Conversion from Single-Crossover
Recombination in the Derivation of SNP Sequences in Populations. In Proceedings of Research in Computational Molecular Biology,
10th Annual International Conference (RECOMB 2006), Volume 3909 of
Lecture Notes in Computer Science Edited by: Edited by Apostolico A,
Guerra C, Istrail S, Pevzner PA, Waterman MS. Springer; 2006:231-245.
Bafna V, Bansal V: Inference about recombination from haplotype data: lower bounds and recombination hotspots. J Comput Biol 2006, 13(2):501-521.
Griffiths RC, Marjoram P: An ancestral recombination graph. In
Progress in Population Genetics and Human Evolution, Volume 81 of IMA
Volumes in Mathematics and Its Applications Edited by: Edited by Donnelly
P, Tavare S. Berlin: Springer-Verlag; 1997:257-270.
Maynard Smith J: The detection and measurement of recombination from sequence data. Genetics 1999, 153(2):1021-1027.
Hudson RR: Generating samples under a Wright-Fisher neutral model of genetic variation.
Bioinformatics 2002,
18(2):337-338.
Rambaut A, Grassly NC: Seq-Gen: an application for the Monte
Carlo simulation of DNA sequence evolution along phylogenetic trees. Comput Appl Biosci 1997, 13(3):235-238.
Kimura M: A simple method for estimating evolutionary rates
of base substitutions through comparative studies of nucleotide sequences. J Mol Evol 1980, 16(2):111-120.
Kreitman M: Nucleotide polymorphism at the alcohol dehydrogenase locus of Drosophila melanogaster. Nature 1983,
304(5925):412-417.
Song YS, Hein J: Parsimonious recomstruction of sequence
evolution and haplotype blocks: finding the minimum
number of recombination events. In Proceedings of the Third International Workshop on Algorithms in Bioinformatics (WABI 2003). Edited
by: Edited by Benson G, Page R. Springer-Verlag, NY; 2003:287-302.

Page 12 of 13
(page number not for citation purposes)

BMC Genomics 2008, 9(Suppl 1):S24

19.

20.

21.
22.

http://www.biomedcentral.com/1471-2164/9/S1/S24

Nickerson DA, Taylor SL, Weiss KM, Clark AG, Hutchinson RG,
Stengard J, Salomaa V, Vartiainen E, Boerwinkle E, Sing CF: DNA
sequence diversity in a 9.7-kb region of the human lipoprotein lipase gene. Nat Genet 1998, 19(3):233-240.
Clark AG, Weiss KM, Nickerson DA, Taylor SL, Buchanan A, Stengard J, Salomaa V, Vartiainen E, Perola M, Boerwinkle E, Sing CF: Haplotype structure and population genetic inferences from
nucleotide-sequence variation in human lipoprotein lipase.
Am J Hum Genet 1998, 63(2):595-612.
Templeton AR, Clark AG, Weiss KM, Nickerson DA, Boerwinkle E,
Sing CF: Recombinational and mutational hotspots within the
human lipoprotein lipase gene. Am J Hum Genet 2000, 66:69-83.
Russell SJ, Norvig P: Artificial Intelligence: A Modern Approach 1st edition. Prentice Hall; 1995.

Publish with Bio Med Central and every
scientist can read your work free of charge
"BioMed Central will be the most significant development for
disseminating the results of biomedical researc h in our lifetime."
Sir Paul Nurse, Cancer Research UK

Your research papers will be:
available free of charge to the entire biomedical community
peer reviewed and published immediately upon acceptance
cited in PubMed and archived on PubMed Central
yours — you keep the copyright

BioMedcentral

Submit your manuscript here:
http://www.biomedcentral.com/info/publishing_adv.asp

Page 13 of 13
(page number not for citation purposes)

</pre>
</body>
</html>
