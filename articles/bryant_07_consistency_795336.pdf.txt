<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>1748-7188-2-8.fm</title>
<meta name="Author" content="petere"/>
<meta name="Creator" content="FrameMaker 7.0"/>
<meta name="Producer" content="Acrobat Distiller 7.0 (Windows)"/>
<meta name="CreationDate" content=""/>
</head>
<body>
<pre>
Algorithms for Molecular Biology

BioMed Central

Open Access

Research

Consistency of the Neighbor-Net Algorithm
David Bryant1, Vincent Moulton*2 and Andreas Spillner2
Address: 1Department of Mathematics, University of Auckland, Private Bag 92019, Auckland, NZ and 2School of Computing Sciences, University
of East Anglia, Norwich, NR4 7TJ, UK
Email: David Bryant - bryant@math.auckland.ac.nz; Vincent Moulton* - vincent.moulton@cmp.uea.ac.uk;
Andreas Spillner - aspillner@cmp.uea.ac.uk
* Corresponding author

Published: 28 June 2007
Algorithms for Molecular Biology 2007, 2:8

doi:10.1186/1748-7188-2-8

Received: 26 March 2007
Accepted: 28 June 2007

This article is available from: http://www.almob.org/content/2/1/8
© 2007 Bryant et al; licensee BioMed Central Ltd.
This is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/2.0),
which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.

Abstract
Background: Neighbor-Net is a novel method for phylogenetic analysis that is currently being
widely used in areas such as virology, bacteriology, and plant evolution. Given an input distance
matrix, Neighbor-Net produces a phylogenetic network, a generalization of an evolutionary or
phylogenetic tree which allows the graphical representation of conflicting phylogenetic signals.
Results: In general, any network construction method should not depict more conflict than is
found in the data, and, when the data is fitted well by a tree, the method should return a network
that is close to this tree. In this paper we provide a formal proof that Neighbor-Net satisfies both
of these requirements so that, in particular, Neighbor-Net is statistically consistent on circular
distances.

1 Background
Phylogenetics is concerned with the construction and
analysis of evolutionary or phylogenetic trees and networks to understand the evolution of species, populations
and individuals [1]. Neighbor-Net is a phylogenetic analysis and data representation method introduced in [2]. It
is loosely based on the popular Neighbor-Joining (NJ)
method of Saitou and Nei [3], but with one fundamental
difference: whereas NJ constructs phylogenetic trees,
Neighbor-Net constructs phylogenetic networks. The
method is widely used, in areas such as virology [4], bacteriology [5], plant evolution [6] and even linguistics [7].
Evolutionary processes such as hybridization between
species, lateral transfer of genes, recombination within a
population, and convergent evolution can all lead to evolutionary histories that are distinctly non tree-like. Moreover, even when the underlying evolution is tree-like, the
presence of conflicting or ambiguous signal can make a

single tree representation inappropriate. In these situations, phylogenetic network methods can be particularly
useful (see e.g. [8]).
Phylogenetic networks are a generalization of phylogenetic trees (see Figure 1 for a typical example of a phylogenetic network). In case there are many conflicting
phylogenetic signals supported by the data, Neighbor-Net
can represent this conflict graphically. In particular a single network can represent several trees simultaneously,
indicate whether or not the data is substantially tree-like,
and give evidence for possible reticulation or hybridization events. Evolutionary hypotheses suggested by the network can be tested directly using more detailed
phylogenetic analyses and specialized biochemical methods (e.g. DNA fingerprinting or chromosome painting).
For any network construction method, it is vital that the
network does not depict more conflict than is found in the
Page 1 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

Snp39*
Smb27

UND101
Snp76
C

Sha158

Sbr68
Sty85
UND64 ,Snp128

D
Smb−17
B

Sha161
Sha154

Sha149,Snp34*
Sty62
Sha169
E
San37
Sha182
Sca97, UND79

Sty15*
Sha183
She7*
Sag129
Sha147

She12 A
Sse94

Sty90

Sre115
Sha151,Sjo99
Sha135,Sha146 UND8
Sha184,Sen57*,Sha139,Sha60
She49*

Sty19*
0.01

Figure 1
A phylogenetic network
A phylogenetic network. The network was generated by Neighbor-Net for a sequence-based data set comprising of Salmonella isolates that originally appeared in [17]. A detailed network-based analysis of this data is presented in [2], where the
strains indicated in bold-face are tested for the presence of recombination. Note that the network is planar (that is, it can be
drawn in the plane without any crossing edges), and that parallel edges in the network represent bipartitions of the data.
data and that, if there are conflicting signals, then these
should be represented by the network. At the same time,
when the data is fitted well by a tree, the method should
return a network that is close to being a tree. This is essential not just to avoid false inferences, but for the application of networks in statistical tests of the extent to which
the data is tree-like [9].
In this paper we provide a proof that these properties all
hold for Neighbor-Net. Formally, we prove that if the
input to NeighborNet is a circular distance function (distance matrix) [10], then the method returns a network
that exactly represents the distance. Circular distance functions are more general than additive (patristic) distances
on trees and, thus, as a corollary, if Neighbor-Net is given
an additive distance it will return the corresponding tree.
In this sense, Neighbor-Net is a statistically consistent
method.
The paper is structured as follows: In Section 2 we introduce some basic notation, and in Section 3 we review the

Neighbor-Net algorithm. In Section 4 we prove that
Neighbor-Net is consistent (Theorem 4.1).

2 Preliminaries
In this section we present some notation that will be
needed to describe the Neighbor-Net algorithm. We will
assume some basic facts concerning phylogenetic trees,
more details concerning which may be found in [11].
Throughout this paper, X will denote a finite set with cardinality n. A split S = {A, B} (of X) is a bipartition of X. We
let = (X) = {{A, X\A}|∅ ⊂ A ⊂ X} denote the set of all
splits of X, and call any non-empty subset of (X) a split system. A split weight function on X is a map ω: (X) → ‫ .0≥ޒ‬We
let ω denote the set {S ∈ |ω(S) > 0}, the support of ω.
Let Θ = x1, ..., xn be an ordering of X. A split S = {A, B} is
compatible with Θ if there exist i, j ∈ {1, ..., n}, i ≤ j, such
that A = {xi, ..., xj} or B = {xi, ..., xj}. Note that if a split is
compatible with an ordering Θ it is also compatible with
its reversal xn, ..., x2, x1 and with ordering x2, ..., xn, x1. We

Page 2 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

let Θ denote the set of those splits in (X) which are compatible with ordering Θ. A split system ' is compatible with
Θ if ' ⊆ Θ. In addition a split system ' ⊆ (X) is circular if
there exists an ordering Θ of X such that ' is compatible
with Θ. Note that any split system corresponding to a phylogenetic tree is circular [[11], Ch. 3], and so circular split
systems can be regarded as a generalization of split systems induced by phylogenetic trees. A split weight function ω is called circular if the split system ω is circular. A
distance function on X is a map d: X × X → ‫ 0≥ޒ‬such that for
all x, y ∈ X both d(x, x) = 0 and d(x, y) = d(y, x) hold. Note
that any split weight function ω on X induces a distance
function dω on X as follows: For a split S = {A, B} ∈ (X)
define the distance function or split metric dS by

⎧ 0 if {x, y} ⊆ A or {x, y} ⊆ B
dS ( x, y) = ⎨
⎩1 otherwise,
and put

dω ( x, y) =

∑

S∈S( X )

http://www.almob.org/content/2/1/8

function ω so that the distance function dω gives a good
approximation to d. The resulting distance function dω can
then be represented by a planar phylogenetic network as
indicated in the last section.
To this end, NEIGHBOR-NET first computes an ordering
Θ of X, and then applies a non-negative least-squares procedure to find a best fit for d within the set of distance
functions {dϕ|ϕ:(X) → ‫ ,0≥ޒ‬ϕ ⊆ Θ}. More details concerning the least-squares procedure may be found in [2]: Here
we will concentrate on the description of the key computation for finding an ordering Θ of X, which is detailed in
the procedure FINDORDERING.
An (ordered) cluster is a non-empty finite set C together
with an ordering ΘC = c1, ..., ck of the elements in C, k = |C|.
Two elements a, b ∈ C are called neighbors if there exists i
∈ {1, ..., k - 1} such that a = ci and b = ci+1, or b = ci and a
= ci+1. The input of the procedure FINDORDERING con-

ω (S)dS (x, y)

for all x, y ∈ X. A distance function d is called circular if
there exits a circular split weight function ω such that d =
dω. An ordering Θ of X is said to be compatible with d if

sists of a set C of mutually disjoint clusters, together with
a distance function d on the set Y = ∪ C∈C C . The ordering Θ = y1, ..., yn of Y that is returned by FINDORDERING
must be compatible with the collection C of ordered clusters, that is, for every cluster C ∈ C there must exist i, j ∈

there exists ω such that d = dω and ω ⊆ Θ. Note that the rep-

{1, ..., n}, i ≤ j, with the property that ΘC = yi, ..., yj or ΘC =

resentation of a circular distance function d is unique, i.e.,
if d = dω1 and d = dω 2 for circular split weight functions

yj, ..., yi.

ω1 and ω2 then ω1 = ω2 holds [10].
Circular distances were introduced in [10] and have been
further studied in, for example, [12] and [13]. Just as any
tree-like distance function on X can be uniquely represented by a phylogenetic tree [[11], ch. 7], any circular distance function d can be represented by a planar
phylogenetic network such as the one pictured in Figure
1[14]. The program SplitsTree [9] allows the automatic
generation of such a network for d by computing a circular
split weight function ω with d = dω.

3 Description of the Neighbor-Net algorithm
In this section we present a detailed description of the
Neighbor-Net algorithm, as implemented in the current
version of SplitsTree [9]. The Neighbor-Net algorithm was
originally described in [2], where the reader may find a
more informal description for how it works. For the convenience of the reader we will use the same notation as in
[2] where possible.
In Figure 2 we present pseudo-code for the Neighbor-Net
algorithm. The aim of the algorithm is, for a given input
distance function d, to compute a circular split weight

The procedure FINDORDERING calls itself recursively.
Apart from the base case (line 5 of Figure 2), where the
recursion bottoms out, two different cases are considered
– the reduction and selection cases (lines 7–15 and lines
17–22 of Figure 2, respectively). In the reduction case a
cluster C ∈ C with k = |C| ≥ 3 is replaced by a smaller cluster C'. In particular, in lines 7–11 we let ΘC = c1, ..., ck be
the ordering of C with c1 = x, c2 = y, c3 = z, and put C' =
(C\{x, y, z}) ∪ {u, v} and ΘC'= u, v, c4, ..., ck, where u and
v are two new elements not contained in Y. Then, in lines
12–14, we define a distance function d' on the set Y' =
(Y\{x, y, z}) ∪ {u, v} using the formulae:
d ′(a, b) = d(a, b)
for {a, b} ⊆ Y ′ \ {u, v}
for a ∈ Y ′ \ {u, v}
d ′(u, a) = (α + β )d( x , a) + γ d( y , a)
d ′(v , a) = α d( y , a) + ( β + γ )d( z , a)
for a ∈ Y ′ \ {u, v}
d ′(u, v) = α d( x , y) + β d( x , z) + γ d( y , z)

(1)
where α, β and γ are positive real numbers satisfying α +
β + γ = 1 (note that these formulae slightly differ from the
ones given in [2] in which there is a typographical error).

Page 3 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

Neighbor-Net(X, d)
Input:
Output:
1.
2.
3.
4.

A ﬁnite non-empty set X and a distance function d on X
A circular split weight function ω

C = {{x} | x ∈ X}
Θ = FindOrdering(C, d)
ω = EstimateSplitWeights(X, d, Θ)
return ω

//initial set of clusters

FindOrdering(C, d)
Input:
Output:
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.

A collection C of ordered clusters and a distance function d
An ordering Θ of the elements in ∪C∈C C

Y = ∪C∈C C
m = |C|
n = |Y |
//base case
if n ≤ 3
return an ordering Θ of Y that is compatible with C.
//reduction case
else if there exists C ∈ C with k = |C| ≥ 3
Select x = c1 , y = c2 and z = c3 from C with ΘC = c1 , . . . , ck .
Create two new elements u, v not contained in Y .
C = (C \ {x, y, z}) ∪ {u, v}
ΘC = u, v, c4 , . . . , ck
C = (C \ {C}) ∪ {C }
Compute distance function d on Y = ∪C∈C C according to (1).
Θ = FindOrdering(C , d )
Compute an ordering Θ of Y according to (2).
return Θ
else
//selection case
Select two clusters C1 , C2 ∈ C that minimize (3).
C = C1 ∪ C2
Compute ordering ΘC using (4).
C = (C \ {C1 , C2 }) ∪ {C }
Θ = FindOrdering(C , d)
return Θ

Figure 2
The Neighbor-Net algorithm
The Neighbor-Net algorithm. Pseudo-code for the Neighbor-Net algorithm detailing the procedure FINDORDERING.

Page 4 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

In the current implementation of Neighbor-Net the values
α = β = γ = 1/3 are used.
When FINDORDERING is recursively called with the new
collection C ′ of clusters and distance function d' it returns
′
′
an ordering Θ′ = y1 ,..., yn−1 of Y' that is compatible with

C ′ . Thus, there exists i ∈ {1, ..., n - 2} such that either u =
yi′ and v = yi′+1 or v = yi′ and u = yi′+1 . The resulting ordering Θ of Y is then defined (in line 14) as follows:

′
′
⎧ y1 ,..., yi′−1 , x, y , z, yi′+ 2 ,..., yn−1 if u =
Θ=⎨
′
′
⎩ y1 ,..., yi′−1 , z , y , x, yi′+ 2 ,..., yn−1 if u =

yi′ and v = yi′+1
yi′+1 and v = yi′ .
(2)

This completes the description of the reduction case.
We now describe the selection case. Note that in view of
line 6 this case only applies if every cluster in C contains
at most two elements. In lines 17–18, two clusters C1, C2
∈ C are selected and replaced by the single cluster C' = C1
∪ C2. The clusters C1 and C2 are selected as follows: We
define a distance function d on the set of clusters C by

⎧0
⎪
d( A, B) = ⎨ 1
⎪ A B
⎩

if A = B

∑ a∈A ∑ b∈B d(a, b)

if A ≠ B,

∑

C∈C \{C1}

d(C1 , C) −

∑

C∈C \{C2}

d(C2 , C)

(3)
where m is the number of clusters in C . The function Q
that is used to select pairs of clusters is called the Q-criterion. Note that this is a direct generalization of the selection criterion used in the NJ algorithm [2]. However,
using only this criterion yields a method that is not consistent as illustrated in Figure 3. So, once the clusters C1
and C2 have been selected we use a second criterion to
determine an ordering ΘC' in line 19 for the new cluster C'.
In particular, for every x ∈ C1 ∪ C2 we define

R( x) =

∑

C∈C \{C1 ,C2}

d({x}, C) +

∑

that minimize the quantity

ˆ
ˆ
Q [d](x1, x2) = ( m - 2)d(x1, x2) - R(x1) - R(x2).

(4)

We then choose an ordering ΘC' in which x1 and x2 are
neighbors and for which every two elements that were
neighbors in C1 or C2 remain neighbors. This completes
the description of the selection case, and hence the
description of the procedure FINDORDERING.

4 Neighbor-Net is consistent
In this section we prove the consistency of Neighbor-Net:
Theorem 4.1 If d: X × X → ‫ 0≥ޒ‬is a circular distance function, then the output of the Neighbor-Net algorithm is a
circular split weight function ω: (X) → ‫ 0≥ޒ‬with the property that d = dω.
The key part of the Neighbor-Net algorithm is the procedure FINDORDERING. We will show that, for a circular
distance function d = dω on X, the call FINDORDERING({{x}|x ∈ X}, d) will produce an ordering Θ of X that
is compatible with d. The non-negative least squares procedure finds the distance function in {dϕ|ϕ: (X) → ‫ ,0≥ޒ‬ϕ
⊆ Θ} that is closest to d. As this set of distance functions
includes dω, the least squares procedure returns exactly d =
dω, proving the theorem.
We focus, then, on the proof that FINDORDERING
behaves as required:

and select C1, C2 ∈ C , C1 ≠ C2 that minimize the quantity
Q(C1 , C2 ) = (m − 2)d(C1 , C2 ) −

ˆ
put m = m + |C1| + |C2| - 2, and select x1 ∈ C1 and x2 ∈ C2

y∈(C1 ∪C2 )\{x}

d( x, y),

Theorem 4.2 Let d: Y × Y → ‫ 0≥ޒ‬be a distance function that
is induced by a circular split weight function ω: (Y) → ‫.0≥ޒ‬
In addition, let C be a collection of mutually disjoint
clusters with the property that Y = Y = ∪ C∈C C , and
assume there exists an ordering of Y that is compatible
with ω and with C . Then FINDORDERING( C , d) will
compute an ordering that is compatible with the collection of clusters C and with the split weight function ω.
We present the proof of this result in the remainder of this
section. Suppose that the algorithm FINDORDERING is
called with input C and d and that there exists an ordering that is compatible with C and d. Let Y = ∪ C∈C C . We
prove Theorem 4.2 by induction, first on |Y|, the cardinality of Y, and then on | C |, the number of clusters in C .
The base case of the induction is |Y| ≤ 3. In this case the set
of splits Θ equals (Y) for every ordering of Y. In particular,

Page 5 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

z
1

u

x
1
y

1

3

1

1

1

1

3

1

Proposition 4.3 If C ′ and d' are constructed according to
lines 7–12 of the procedure FINDORDERING then there
exists an ordering compatible with C ′ and d'.
Proof: Suppose that Θ = y1, ..., yn is an ordering of Y that is
compatible with C and d, where, without loss of general-

1

v

1
w
Figure 3
A network representing a circular distance
A network representing a circular distance. A circular
distance d on the set {u, v, ..., z} for which NeighborNet using
only the Q-criterion employed in NJ to cluster elements
would be inconsistent. Distances are given by shortest paths
in the network. The pairs u, v and x, y would be clustered
together first and then the pair z, w. However it is not hard
to show that z and w are not adjacent in any ordering of {u, v,
..., z} that is compatible with d.

ity, we have ΘC = y1, ..., yk. Let Θ′ = u, v, y4, ..., yn = z1, ...,
zn-1, which is an ordering of Y' = ∪ C∈C′ C . We claim that
the ordering Θ′ is compatible with the collection C ′ and
with the distance function d'.
Since C is compatible with Θ it is straight-forward to
check that C ′ is compatible with Θ′ . Hence, we only
need to show that Θ′ is compatible with d'. We will use a
4-point condition that was first studied in a different context by Kalmanson [15] and has been shown to characterize circular distances in [12]. To be more precise, it suffices
to show that, for every four elements zi1 , zi2 , zi3 , zi4 , i1 <i2
<i3 <i4,

any ordering of Y that is compatible with C is also compatible with ω.
We now assume that |Y| > 3 and make the following induction hypothesis:

d′( zi1 , zi3 ) + d′( zi2 , zi4 ) ≥ d′( zi1 , zi2 ) + d′( zi3 , zi4 ) and
d′( zi1 , zi3 ) + d′( zi2 , zi4 ) ≥ d′( zi1 , zi4 ) + d′( zi2 , zi3 ).
Case 1: |{ zi1 , zi2 , zi3 , zi4 } ∩ {u, v}| = 0. The above inequalities follow immediately since d is circular, and d and d' as

If there exists an ordering compatible with distance
function d' and ordered clusters C ′ , where either
| ∪ C∈C′ C | < |Y|, or | ∪ C∈C′ C | = |Y| and | C ′ | < | C |,
then FINDORDERING( C ′ , d') will return an ordering
compatible with C ′ and d'.
There are two cases to consider. In the first case, C con-

well as Θ and Θ′ coincide on Y'\{u, v}.
Case 2: |{ zi1 , zi2 , zi3 , zi4 } ∩ {u, v}| = 1. Consider the situation zi1 = u. Then

d′( zi1 , zi3 ) + d′( zi2 , zi4 )

tains some cluster C with |C| ≥ 3. In the second case, C

= (α + β )d( x, zi3 ) + γ d(y , zi3 ) + (α + β + γ )d( zi2 , zi4 )

contains only clusters C with |C| ≤ 2.

≥ (α + β )d( x, zi2 ) + γ d(y , zi2 ) + (α + β + γ )d( zi3 , zi4 )

4.1 Case 1: The reduction case

= d′( zi1 , zi2 ) + d′( zi3 , zi4 ).

Suppose that there is C ∈ C with |C| ≥ 3. This is the reduction case in the description of the algorithm. The procedure FINDORDERING constructs a new set of clusters C ′
(in line 11) and a new distance function d' (in line 12).
We first show that, if there is an ordering compatible with
C and d, then there is also an ordering compatible with
C ′ and d'.

The other inequalities can be derived in a completely analogous way.
Case 3: |{ zi1 , zi2 , zi3 , zi4 } ∩ {u, v}| = 2. Then we have zi1
= u and zi2 = v and

Page 6 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

d′( zi1 , zi3 ) + d′( zi2 , zi4 )

http://www.almob.org/content/2/1/8

2ω ′(S′) = d′( z1 , z j ) + d′( z j −1 , zn−1 ) − d′( z1 , z j −1 ) − d′( z j , zn−1 )
= (α + β )d(y1 , y j +1 ) + γ d(y2 , y j +1 ) + d(y j , yn )

= (α + β )d( x, zi3 ) + γ d(y , zi3 ) + α d(y , zi4 ) + ( β + γ )d( z , zi4 )

−(α + β )d(y1 , y j ) − γ d(y2 , y j ) − d(y j +1 , yn )

≥ α d( x, y) + β d( x, z) + γ d(y , z) + (α + β + γ )d( zi3 , zi4 )

≥ (α + β + γ )(d(y1 , y j +1 ) + d(y j , yn ) − d(y1 , y j ) − d(y j +1 , yn ))

= d′( zi1 , zi2 ) + d′( zi3 , zi4 ).

The
other
inequality
d′( zi1 , zi3 ) + d′( zi2 , zi4 ) ≥ d′( zi1 , zi4 ) + d′( zi2 , zi3 ) can be
shown to hold in a similar way. ■
The procedure FINDORDERING calls itself recursively
with C ′ and d' as input. An ordering of Y', the union of
C ′ , is returned. By Proposition 4.3 and the induction
hypothesis, this ordering Θ' is compatible with C ′ and d'.
It is used to construct an ordering Θ on Y, in line 14,
which becomes the output of the procedure.
Proposition 4.4 The ordering Θ is compatible with collection C and with the distance function d.
Proof: Since C ′ is compatible with Θ' it is straight-forward
to check that C is compatible with Θ. Hence we only need
to show that Θ is compatible with d.
Let orderings Θ = y1, ..., yn of Y and Θ′ = z1, ..., zn-1 of Y'

= 2ω (S)

Thus, ω'(S') > 0. Hence, the split S' is compatible with the
ordering Θ' of Y'. But then the split S is compatible with
the ordering Θ of Y.
Case 3: j ≥ 4 and 2 ≤ i ≤ 3. We only consider the situation
when i = 2; the situation i = 3 is completely analogous.
Define A' = {z2, ..., zj-1} and the split S' = {A', Y'\A'} of Y'.
With a similar calculation as made for Case 2 we obtain
ω'(S') ≥ (α + β)ω(S). Hence, ω'(S') > 0 and, thus, S' is compatible with Θ'. But then S is compatible with Θ.
Case 4: j ≥ 4 and i = 4. This case is similar to Case 2. Define
A' = {z4, ..., zj-1} and S' = {A', Y'\A'}. We obtain ω'(S') ≥
ω(S). Hence, as for Case 2, ω'(S') > 0 and, thus, S is compatible with Θ.
Case 5: j ≥ i ≥ 5. Define the split S' = {A, Y'\A}. Then we
have ω'(S') = ω'(S') > 0. Hence, S' is compatible with Θ'
and, thus, S is compatible with Θ. ■
4.2 Case 2: The selection case

weight function such that d = dω. Then Θ is compatible

Now suppose that there are no clusters C ∈ C with |C| ≥
3. This is the selection case in the description of the algorithm.

with all splits S such that ω(S) > 0. Now consider some
split S = {A, B} such that ω(S) > 0 and assume that yn ∈ B.

In line 17 the algorithm selects two clusters that minimize
(3):

be as in the proof of Proposition 4.3 and let ω be the split

Then there exists i, j ∈ {1, ..., n - 1}, i ≤ j, such that A = {yi,
..., yj}. Note also that, since the distance function d' is

Q(C1 , C2 ) = (m − 2)d(C1 , C2 ) −

compatible with ordering Θ′ = z1, ..., zn-1 of Y' and, hence,
is circular, there exists a unique circular split weight function ω': (Y') → ‫ 0≥ޒ‬with the property that d' = dω'. We
divide the remaining argument into five cases.
Case 1: j ≤ 3. Then, clearly, S is compatible with Θ.
Case 2: j ≥ 4 and i = 1. Define A' = {z1, ..., zj-1} and the split
S' = {A', Y'\A'} of Y'. Then we can express ω'(S') in terms
of d' as follows (cf. [12]):

∑

C∈C \{C1}

d(C1 , C) −

∑

C∈C \{C2}

d(C2 , C),

where

⎧0
⎪
d( A, B) = ⎨ 1
⎪ A B
⎩

if A = B

∑ a∈A ∑ b∈B d(a, b)

if A ≠ B.

Note that d is a distance function defined on the set of
clusters C . We will first show that d is circular. We do
this in two steps: Proposition 4.5 and Proposition 4.6.
Proposition 4.5 Let d: M × M → ‫ 0≥ޒ‬be a circular distance
function and Θ = x1, ..., xn be an ordering of M that is compatible with d. Let M' = (M\{x1, x2}) ∪ {y} where y is a

Page 7 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

new element not contained in M. Define a distance function d': M' × M' → ‫ 0≥ޒ‬as follows:

d′(a, b) = d(a, b)
for {a, b} ⊆ M′ \{y}
d′(y , a) = λ d( x1 , a) + (1 − λ )d( x2 , a) for a ∈ M′ \{y},
where λ is a real number with the property that 0 <λ < 1.
Then the following hold:

http://www.almob.org/content/2/1/8

n

n

k =1

k =1

QS ( xi , x j ) = (n − 2)dS ( xi , x j ) − ∑ dS ( xi , xk ) − ∑ dS ( x j , xk )
and let

λ(S) =

r −1

∑ QS (xl , xl+1) − (r − 1)QS (x1 , xr ).
l =1

(i) d' is circular and compatible with ordering y, x3, ..., xn
of M'.

(i) If min{|A|, |M\A|} > 1 and |A ∩ {x1, xr}| = 1 then λ(S)
< 0.

(ii) If z1, ..., zn-1 is an ordering of M' that is compatible with
d' then at least one of the orderings x1, x2, z2, ..., zn-1 or x2,
x1, z2, ..., zn-1 of M is compatible with d.

(ii) Any other split S compatible with Θ satisfies λ(S) ≤ 0.

Proof: (i) and (ii) can be proven using convexity arguments, or in a way analogous to our proof of Propositions
4.3 and 4.4, respectively. ■
Proposition 4.6 The distance function d , defined on the
individual clusters in C , is a circular distance. Moreover,
for every ordering D1, ..., Dk of C that is compatible with

d there exist orderings Θi of Di, i ∈ {1, ..., k}, such that the
ordering Θ1, ..., Θk of Y is compatible with distance function d.
Proof: We use multiple applications of Proposition 4.5,
once for each cluster in C with two elements, and with λ
=

1
in each case. ■
2

We now have the more difficult task of showing that clusters C1 and C2 selected by the Q-criterion, that is by minimizing (3), are adjacent in at least one ordering of the
clusters that is compatible with d , as described in Proposition 4.6. This is the most technical part of the proof. The
key step is the inequality established in Lemma 4.7. This
is used to prove Theorem 4.8, which establishes that the
Q-criterion when applied to a circular distance will always
select a pair of elements that are adjacent in at least one
ordering compatible with the circular distance. As a corollary it will follow that there exists an ordering of the clusters in C compatible with d where C1 and C2 are
adjacent.
Lemma 4.7 Let Θ = x1, x2, ..., xn be an ordering of M that is
compatible with circular distance d on M and suppose
that 3 ≤ r ≤ Ln/2O. Let S = {A, M\A} be a split compatible
with Θ where A = {xi, ..., xj}. Define QS: M × M → ‫ ޒ‬by

Proof: Expanding λ(S) gives
r −1

λ(S) = (n − 2)∑ dS (xl , xl +1 ) −(r − 1)(n − 2)dS (x1 , xr )
l =1
n

r −1 n

+(r − 2)∑ dS ( x1 , xl )

−2∑ ∑ dS ( xl , xk )

i =1
n

l =2 k =1

+(r − 2)∑ dS ( xr , xl ).
l =1

We divide the rest of our argument into five cases which
are summarized in Table 1. For these cases straight-forward calculations yield the entries of Table 2. Using Table
2 we compute λ(S) in each case.
Case (i): We obtain λ(S) = 2(j - 1)(j + 1 - r) + 2(j - 1)(j + 1
- n). Hence, λ(S) = 0 if j = 1 and λ(S) < 0 if j ≥ 2.
Case (ii): We obtain λ(S) = 0.
Case (iii): We obtain λ(S) = (j - i)(4(j - i) - 2n + 8). Thus,
since j - i ≤ r - 3 ≤ (n + 1)/2 - 3, λ(S) = 0 if i = j and λ(S) <
0 if i <j.
Case (iv): We obtain λ(S) = 2(i - r)(n - 2 - (j - i)) + 2(2 - i)(j
- i). Thus, since j - i ≤ n - 3, λ(S) < 0 if i <r. If i = r then λ(S)
= 0 if j = r and λ(S) < 0 otherwise.
Case (v): We obtain λ(S) = 0. ■
Theorem 4.8 Let M be a set of n elements and d: M × M →
‫ 0≥ޒ‬be a circular distance function. Suppose that x, y minimize

Q( x, y) = (n − 2)d( x, y) −

∑ d(x, z) − ∑ d(y , z).

z∈M

z∈M

Then there is an ordering of M that is compatible with d
in which x and y are adjacent.

Page 8 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

Proof: Let Θ = x1, ..., xn be an ordering of M that is compatible with d. Suppose that Q(x1, xr) ≤ Q(x, y) for all x, y
where, without loss of generality, 2 ≤ r ≤Ln/2O. If r = 2 then
we are done, so we assume r ≥ 3. Let ω be the (circular)
split weight function for which d = dω, so Θ is compatible
with ω. Let Θ* be the ordering obtained by removing xr
from Θ and re-inserting it immediately after x1. We claim
that Θ* is also compatible with ω.
As in Lemma 4.7, for any split S compatible with Θ we
define

λ(S) =

r −1

∑ QS (xl , xl+1) − (r − 1)QS (x1 , xr ).

FINDORDERING is then called recursively. The following
is directly analogous to Proposition 4.3.
Proposition 4.10 There exists an ordering of Y that is
compatible with collection C ′ and split weight function

ω.
Proof: We already know by Proposition 4.9 and Proposi-

l =1

tion 4.6 that there exists an ordering Θ = y1, ..., yn of Y that

By the choice of x1 and xr we have

(r − 1)Q( x1 , xr ) ≤

After selecting C1 and C2 the procedure FINDORDERING
removes these clusters from the collection and replaces
them with their union C' = C1 ∪ C2. It also assigns an
ordering ΘC' to the cluster.

is compatible with C and ω and, in addition, also satisfies
one of the following properties:

r −1

∑ Q(xl , xl+1).
l =1

Since Q is linear, and d = ΣS∈(X)ω(S)dS by Lemma 4.7 we
have

C1 = {y1} and C2 = {y2}
C1 = {y1} and C2 = {y2 , y3}
C1 = {y1 , y2} and C2 = {y3} C1 = {y1 , y2} and C2{y3 , y4}.
If x1 ∈ C1 and x2 ∈ C2 are selected such that Θ is also com-

r −1

patible with C ′ then we are done. Otherwise we have to

l =1

0≤

construct a suitable new ordering Θ′ of Y. There are, up to
symmetric situations with roles of C1 and C2 swapped,

∑ Q(xl , xl+1) − (r − 1)Q(x1 , xr )

⎛ r −1
⎞
= ∑ ω (S) ⎜ ∑ QS ( xl , xl +1 ) − (r − 1)QS ( x1 , xr ) ⎟
⎜
⎟
S
⎝ l =1
⎠
= ∑ ω (S)λ(S) ≤ 0.
S

only two cases we need to consider.
Case 1: C1 = {y1, y2}, x1 = y1 and x2 = y3. We want to show
that ordering Θ′ = y2, y1, y3, ..., yn is compatible with ω. To

Now consider any split S compatible with Θ but not Θ*.
Then S satisfies the conditions in Lemma 4.7 (i), giving
λ(S) < 0 and hence ω(S) = 0. Thus there are no splits in the
support of ω that are not compatible with Θ*, and Θ* is
compatible with ω and, hence, d. Thus x1 and xr are adjacent in an ordering Θ* compatible with d. ■
Corollary 4.9 Let C1 and C2 be the two clusters selected in
line 17 of procedure FINDORDERING. Then there exists
an ordering Θ* = D1, ..., Dk of C such that D1 = C1, D2 =
C2 and d is compatible with Θ*.

ˆ
ˆ
this end we first show that Q [d](y2, y3) ≤ Q [d](y1, y3). It
suffices to establish this inequality for all split metrics dS
with S ∈ SΘ . Define the set of splits
' = {{{y2, ..., yi}, Y\{y2, ..., yi}}|3 ≤ i ≤ n - 1}.
By a case analysis similar to the one applied in the proof
of Lemma 4.7 we obtain the following:

ˆ
ˆ
• Q [dS](y2, y3) = Q [dS](y1, y3) if S ∈ SΘ \', and
ˆ

Table 1: List of cases in the proof of Lemma 4.7

Case

i

j

Case

i

j

(i)
(ii)
(iii)

i=1
i=1
1 <i <r

1 ≤ j <r
r ≤ j <n
i ≤ j <r

(iv)
(v)

1 <i ≤ r
r <i <n

r ≤ j <n
i ≤ j <n

Page 9 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

http://www.almob.org/content/2/1/8

Table 2: Precomputed expressions used in the proof of Lemma 4.7

Case

(i)
(ii)
(iii)
(iv)
(v)

Case

(i)
(ii)
(iii)
(iv)
(v)

r −1

∑ l=1 dS (xl , xl+1)

dS(x1, xr)

∑ l=1 dS (x1 , xl )

1
0
2
1
0

1
0
0
1
0

n-j
n-j
j-i+1
j-i+1
j-i+1

r −1

n

∑ l=2 ∑ k=1 dS (xl , xk )

∑ l=1 dS (xr , xl )

(j - 1)(n - j) + (r - j - 1)j
(r - 2)(n - j)
(j - i + 1)(n - 2j + 2i + r - 4)
(i - 2)(j - i + 1) + (r - i)(i - 1 + n - j)
(r - 2)(j - i + 1)

j
n-j
j-i+1
i-1+n-j
j-i+1

n

ˆ
ˆ
• Q [dS](y2, y3) < Q [dS](y1, y3) if S ∈ '.
ˆ
ˆ
But then, since Q [d](y1, y3) is minimum, Q [d](y2, y3) =
ˆ
Q [d](y1, y3). Thus, by the above strict inequality, for every
split S ∈ ' we must have ω(S) = 0. Hence, ω is compatible
with Θ′ .
Case 2: C1 = {y1, y2}, C2 = {y3, y4}, x1 = y1, x2 = y4 and n ≥ 5.

n

could yield a consistent variation of the Neighbor-Net
algorithm that is analogous to the recently introduced
QNet algorithm [16], where, instead of reducing the size
of clusters when they have more than two elements, the
reduction case is skipped entirely and clusters are pairwise
combined until only one cluster is left. However, we suspect that such a method would probably not work well in
practice since the reduced distances have smaller variance
than the original distances.

We want to show that Θ′ = y2, y1, y4, y3, y5, ..., yn is com-

References

patible with ω. A similar argument to the one used in Case
1 shows that for every split S in

1.
2.

' = {{{y2, ..., yi}, Y\{y2, ..., yi}}|3 ≤ i ≤ n - 1} ∪ {{{y4, ...,
yi}, Y\{y2, ..., yi}}|5 ≤ i ≤ n}

3.

we must have ω(S) = 0. Thus, ω is compatible with Θ′ . ■
Now, by Proposition 4.10, we can apply the induction
hypothesis and conclude that the recursive call FINDORDERING( C ′ , d) will return an ordering Θ compatible
with C ′ and d. Since Θ will order C' according to ΘC' (or

4.
5.
6.

7.

its reverse), we have that Θ is compatible with C1 and C2.

8.

Thus Θ is compatible with C and d, completing the proof
of Theorem 4.2. ᮀ

9.

Remark 4.11 Note that we have shown that Corollary 4.9
holds under the assumption that (in view of line 6) every
cluster in C contains at most two elements. However, it is
possible to prove this result in the more general setting
where clusters can have arbitrary size. In principle, this

10.
11.
12.
13.

Felsenstein J: Inferring phylogenies Sinauer Associates; 2003.
Bryant D, Moulton V: NeighborNet: An agglomerative method
for the construction of phylogenetic networks. Molecular Biology and Evolution 2004, 21:255-265.
Saitou N, Nei M: The neighbor-joining method: A new method
for reconstructing phylogenetic trees. Molecular Biology and Evolution 1987, 4(4):406-425.
Hu J, Fu HC, Lin CH, Su HJ, Yeh HH: Reassortment and Concerted Evolution in Banana Bunchy Top Virus Genomes.
Journal of Virology 2007, 81:1746-1761.
Lacher D, Steinsland H, Blank T, Donnenberg M, Whittam T:
Sequence Typing and Virulence Gene Allelic Profiling. Journal
of Bacteriology 2007, 189:342-350.
Kilian B, Ozkan H, Deusch O, Effgen S, Brandolini A, Kohl J, Martin
W, Salamini F: Independent Wheat B and G Genome Origins
in Outcrossing Aegilops Progenitor Haplotypes. Molecular
Biology Evolution 2007, 24:217-227.
Hamed MB: Neighbour-nets portray the Chinese dialect continuum and the linguistic legacy of China's demic history.
Proc Royal Society B: Biological Sciences 2005, 272:1015-1022.
Dress A, Huson D, Moulton V: Analyzing and visualizing
sequence and distance data using SplitsTree. Discrete Applied
Mathematics 1996, 71:95-110.
Huson D, Bryant D: Application of Phylogenetic Networks in
Evolutionary Studies. Molecular Biology and Evolution 2006,
23:254-267.
Bandelt HJ, Dress A: A canonical split decomposition theory for
metrics on a finite set. Advances in Mathematics 1992, 92:47-105.
Semple C, Steel M: Phylogenetics Oxford University Press; 2003.
Chepoi V, Fichet B: A note on circular decomposable metrics.
Geometriae Dedicata 1998, 69:237-240.
Christopher G, Farach M, Trick M: The structure of circular
decomposable metrics. Proc of European Symposium on Algorithms
(ESA), Volume 1136 of LNCS, Springer 1996:486-500.

Page 10 of 11
(page number not for citation purposes)

Algorithms for Molecular Biology 2007, 2:8

14.
15.
16.

17.

http://www.almob.org/content/2/1/8

Dress A, Huson D: Constructing split graphs. IEEE Transactions
on Computational Biology and Bioinformatics 2004, 1(3):109-115.
Kalmanson K: Edgeconvex circuits and the travelling salesman
problem. Canadian Journal of Mathematics 1975, 27:1000-1010.
Grünewald S, Forslund K, Dress A, Moulton V: QNet: An agglomerative method for the construction of phylogenetic networks from weighted quartets. Molecular Biology and Evolution
2007, 24:532-538.
Kotetishvili M, Stine O, Kreger A, Morris J, Sulakvelidze A: Multilocus sequence typing for characterization of clinical and environmental salmonella strains. Journal of Clinical Microbiology 2002,
40:1626-1635.

Publish with Bio Med Central and every
scientist can read your work free of charge
"BioMed Central will be the most significant development for
disseminating the results of biomedical researc h in our lifetime."
Sir Paul Nurse, Cancer Research UK

Your research papers will be:
available free of charge to the entire biomedical community
peer reviewed and published immediately upon acceptance
cited in PubMed and archived on PubMed Central
yours — you keep the copyright

BioMedcentral

Submit your manuscript here:
http://www.biomedcentral.com/info/publishing_adv.asp

Page 11 of 11
(page number not for citation purposes)

</pre>
</body>
</html>
