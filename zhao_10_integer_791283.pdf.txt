<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Integer programming-based method for grammar-based tree compression and its application to pattern extraction of glycan tree structures</title>
<meta name="Subject" content="BMC Bioinformatics 2010, 11:S4. doi:10.1186/1471-2105-11-S11-S4"/>
<meta name="Keywords" content=" "/>
<meta name="Author" content="Yang Zhao"/>
<meta name="Creator" content="Arbortext Advanced Print Publisher 10.0.1082/W Unicode"/>
<meta name="Producer" content="Acrobat Distiller 9.0.0 (Windows)"/>
<meta name="CreationDate" content=""/>
</head>
<body>
<pre>
Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

RESEARCH

Open Access

Integer programming-based method for
grammar-based tree compression and its
application to pattern extraction of glycan
tree structures
Yang Zhao, Morihiro Hayashida, Tatsuya Akutsu*
From The 21st International Conference on Genome Informatics (GIW2010)
Hangzhou, People’s Republic of China. 16-18 December 2010

Abstract
Background: A bisection-type algorithm for the grammar-based compression of tree-structured data has been
proposed recently. In this framework, an elementary ordered-tree grammar (EOTG) and an elementary unorderedtree grammar (EUTG) were defined, and an approximation algorithm was proposed.
Results: In this paper, we propose an integer programming-based method that finds the minimum context-free
grammar (CFG) for a given string under the condition that at most two symbols appear on the right-hand side of
each production rule. Next, we extend this method to find the minimum EOTG and EUTG grammars for given
ordered and unordered trees, respectively. Then, we conduct computational experiments for the ordered and
unordered artificial trees. Finally, we apply our methods to pattern extraction of glycan tree structures.
Conclusions: We propose integer programming-based methods that find the minimum CFG, EOTG, and EUTG for
given strings, ordered and unordered trees. Our proposed methods for trees are useful for extracting patterns of
glycan tree structures.

Background
Data compression is useful because it can help reduce
the consumption of expensive resources such as hard
disks. To date, many methods such as Huffman coding,
arithmetic coding, etc. have been proposed to solve
problems of data compression. Data compression is also
useful for the analysis of biological data. Li et al.
proposed the universal similarity metric (USM), and
approximated the dissimilarity using compression sizes.
They applied a compression algorithm to unaligned
mitochondrial genomes, and obtained a phylogeny that
was consistent with the commonly accepted one [1].
Similarly, protein tertiary structures and metabolic networks were compressed, and their similarities were
* Correspondence: takutsu@kuicr.kyoto-u.ac.jp
Bioinformatics Center, Institute for Chemical Research, Kyoto University,
Gokasho, Uji, Kyoto, 611-0011, Japan
Full list of author information is available at the end of the article

measured [2,3]. Grammar-based compression, which is a
typical data-compression method, seeks a small grammar to generate a given string, as it is well known that
it is NP-hard to find the smallest context-free grammar
(CFG). However, in recent years, several polynomial
time algorithms have been proposed to approximate the
smallest grammar for the input data within a factor of
O(log(n/m)), where n and m are the sizes of the input
data and the smallest grammar [4-6], respectively. These
algorithms can be used to compress biological data such
as DNA, RNA, and amino acid sequences. However,
there exist a large amount of tree-structured biological
data (e.g., glycan, etc.). Therefore, it is necessary to
develop methods to compress tree-structured data.
Recent approaches show that it is feasible to extend the
grammar-based compression to the tree-structure data
[7-9]. However, these methods neither output the

© 2010 Akutsu et al; licensee BioMed Central Ltd. This is an open access article distributed under the terms of the Creative Commons
Attribution License (http://creativecommons.org/licenses/by/2.0), which permits unrestricted use, distribution, and reproduction in
any medium, provided the original work is properly cited.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

minimum grammar, nor they achieve a guaranteed
approximation ratio.
In this paper, we propose an integer programming
(IP)-based method that finds the minimum CFG for a
given string under the condition that at most two symbols appear on the right-hand side of each production
rule. Next, we extend this method to find the minimum
elementary ordered-tree grammar (EOTG) and elementary unordered-tree grammar (EUTG) for given ordered
and unordered trees. To the best of our knowledge,
these are the first methods that can find the minimum
size grammars for strings, ordered trees, and unordered
trees.
It is possible to compress ordered trees by transforming them into Euler strings [10], and by applying existing grammar-based string-compression algorithms to
the strings. Such an approach may achieve better compression performances. However, there do not always
exist tree grammars corresponding to string grammars
derived by the approach. Our objective is not only to
compress trees but also to extract features and patterns
from input trees. Therefore, we need to develop methods for finding minimum tree grammars. The organization of the paper is as follows. First, we give an IP-based
method for sequence data compression using CFG. Second, we review an elementary ordered tree grammar
(EOTG) [10] for ordered rooted tree compression, and
extend this IP-based method to the tree compression
problem. Then, we also review an elementary unordered
tree grammar (EUTG) [10] for unordered rooted tree
compression, and extend the above mentioned IP-based
method for unordered trees. Furthermore, we conduct
some computational experiments, apply the proposed
methods to glycan tree-structure data, and extract tree
patterns from generated production rules of simple
EUTGs. Finally, we conclude with future work.

IP formulation for strings
Minimum CFG problem

We use a simple context-free grammar (CFG) for string
and text compression. CFG is defined as 4-tuple (Σ, Γ,
S, Δ), where Σ is a set of terminal symbols (denoted by
a lower-case letter), Γ is a set of nonterminal symbols
(denoted by an upper-case letter), S is a start symbol in
Γ, and Δ is a set of production rules. The size of CFG is
defined as the total number of letters appearing on the
RHSs (Right-Hand Sides) of production rules. Two
CFGs G1 and G2 are said to be equivalent if G1 generates the same set of strings as G2 does. We only consider CFGs consisting of the following types of
production rules:
• A®a,
• A®BC.

Page 2 of 11

We call this CFG a simple CFG. We can show that
any CFG of size m can be transformed into an equivalent, simple CFG of size 3m.
The smallest grammar problem is thus defined as the
problem of finding the smallest grammar that generates
a given string [4].
Minimum CFG

Input: String s = s1s2…sn and integer m.
Output: Simple CFG with m nonterminal symbols
that generates s only.
Transformation to IP

We use the number of nonterminal symbols m instead
of the size of the grammar because the number of terminal symbols appearing in production rules of A ® a is
constant for the given string. In order to solve this minimum CFG problem, we propose an IP-based method as
follows. We transform this problem into the following
integer program, where x1,n = 1 holds iff there exists a
required CFG G.
Maximize x1,n
Subject toxi,i = 1 for all i=1,…,n
x i, j ≤

∑

y i ,k , j ≤

zu ≥

∑

1
n

u

j −1
k =i

y i ,k , j

for all 1 ≤ i < j ≤ n

1
(x i ,k + x k +1, j )
2

∑

i , j: s i , j = u

zu = m

x i, j

(2)

for all 1 ≤ i ≤ k < j ≤ n

(3)

for all distinct substrings u of s

(4)

(5)

In the above equations, each variable of xi,j, yi,k,j, and zu
takes either 0 or 1. Each xi,j corresponds to substring si,j =
sisi+1… sj, and xi,j = 1 iff there exists a nonterminal symbol
Ai,j in G that generates si,j. yi,k,j = 1 iff both of xi,k = 1 and
xk+1,j = 1 hold. It means that si,j can be generated by concatenating si,k and sk+1,j that are generated from nonterminal
symbols Ai,k and Ak+1,j, respectively. zu = 1 iff there exists a
nonterminal symbol in G that generates a substring u of s.
The meaning of each (in)equality is as follows:
(1) each si,i (= si) must be generated,
(2,3) if Ai,j appears in G, si,j must be generated, that is,
for at least some k, both of si,k and sk+1,j must be generated and the production rule A i,j ® A i,k A k+1,j must
appear in G,
(4) A i,j and A i’,j’ , are identified if both generate the
same substring u, and

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

x1,8
a b c a b c a b
x1,6
x7,8
a b c a b c a b
y1,1,6 y1,3,6 y1,5,6

x1,3
x4,6 x7,7 x8,8
a b c a b c a b
zabc

Figure 1 Illustration of the minimum CFG for a string
“abcabcab” In the minimum CFG, the substring “abc” is generated
from a nonterminal symbol Aabc. Then, zabc = 1, x1,3 = 1, and x4,6 =
1. To generate “abcabc”, that is, x1,6 = 1, at least one variable of y1,k,6
(k = 1,...,5) must be 1, that is, the substring s1,6 must be divided into
s1,k and sk+1,6. Here, y1,3,6 = 1 because x1,3 = x4,6 = 1. Then, the
production rule Aabcabc ® AabcAabc appears.

(5) the number of nonterminal symbols used in G
must be m.
Figure 1 shows an example of the above IP formulation for the string “abcabcab”. For this example, the following grammar is constructed from a solution of IP:
A1,8 ® A1,6A7,8,
A1,6 ® A1,3A4,6,
A1,3 ® A1,2A3,3,
A 4,6 ® A4,5A6,6,
A7,8 ® A7,7A8,8,
….
On the other hand, we have Aabcabcab = A1,8, Aabc =
A1,3 = A4,6, etc. Therefore, we finally have:
Aabcabcab ® AabcAabcAab,
Aabc ® AabAc,
Aab ® AaAb,
Aa ® a,
Ab ® b,
Ac ® c.

Page 3 of 11

nonterminal symbols; each edge of the trees has either a
terminal or a nonterminal symbol; S is a start symbol in
Γ, and Δ is a set of production rules (R1u,t), (R2u,t,t’),
and (R3u,t), as in Figure 2. (R1u) ((R1t)) denotes a rule
when an untagged (tagged) edge of nonterminal symbol
A is replaced with an untagged (tagged) edge of terminal
symbol a. (R2u,t,t’) denotes a rule when an edge of a
nonterminal symbol A is replaced with a tree that contains the upper endpoints of edges of nonterminal symbols B and C as the root, and the lower endpoints as
two children. (R3u,t) denotes a rule when an edge of A
is replaced with a tree in which the root is the upper
endpoint of an edge of B, and the lower endpoint is the
upper endpoint of an edge of C. We can show that any
EOTG of size m can be transformed into an equivalent
SEOTG of size 3m.
Within the class of SEOTGs, we can transform the minimum grammar problem into the IP. For this purpose, we
define the minimum SEOTG problem as follows.
Minimum SEOTG

Input: Rooted ordered tree T(V, E) and integer m,
where V is a set of vertices and E is a set of labeled
edges.
Output: Simple EOTG with m nonterminal symbols
that generates only T.

Transformation to IP
A subtree of T(V, E) can be represented as a rooted
ordered tree Ti,t,h,k with a root i, a tag t, a left-most child
h, and a right-most child k of i (Figure 3), where the tree
(R1t)

(R1u)

A

A

We use a simple elementary ordered tree grammar
(EOTG) [10] for rooted tree compression. In this
grammar, a tree can contain a vertex called a tag. A tag
indicates that another tree at the root can be attached to
it. We assume that there is at most one tag in such a tree.
A simple EOTG (SEOTG) is defined as 4-tuple (Σ,Γ, S,
Δ), where Σ is a set of terminal symbols, Γ is a set of

a

(R2t)

(R2u)

B

C

A

B

C

B

C

(R2t’ )

A

IP formulation for ordered trees
Minimum EOTG problem

A

a

(R3u)

(R3t)

B
A

B
A

C

C

Figure 2 Production rules of simple EOTG A black circle denotes
a tag.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

Page 4 of 11

denotes a set of ancestors of i (i ∉ an(i), and suppose
an (Î) = ∅), and es(T) denotes the Euler string of the
ordered tree T (for a tagged tree, the tagged edge with
label A is transformed into AxĀ, where x is a special
symbol representing the tag). It should be noted that if
es(T) = es(T’), T is isomorphic to T’. In the above pro-

i
h

k
t

Figure 3 Example of ordered tree Ti,t,h,k

includes all the children of i between h and k in T(V, E).
If a subtree does not contain any tag, we introduce
Î that is not included in V, and represent it as Ti,Î,h,k,. It
is obvious from the production rules of simple EOTGs
that it is sufficient to consider only such subtrees Ti,t,h,k
for T(V, E) because (R2u,t) denotes a rule to horizontally
divide a tree into two trees at the root, and (R3u,t)
denotes a rule to vertically divide a tree into two trees
at an internal vertex that becomes a tag. Let ch(i) =
(lch(i),…, rch(i)) denote a sequence of all the children of i
in T(V, E), lch(i) is the left-most child, and rch(i) is the
right-most child. Without loss of generality, we assume
that i1≤...≤ ik for ch(i) = (i1, ..., ik). We suppose that the
root of T(V, E) is 1. Then, this problem can be transformed into the following integer program, where x1,Î,lch
(1),rch(1) = 1 holds iff there exists a required EOTG G.
Maximize x1,Î,lch(1),rch(1)
Subject to
x i ,∈, j , j = 1 for all i, j ∈ ch(i) (| ch( j) |= 0)

(1u)

x i , j , j , j = 1 for all i, j ∈ ch(i) (| ch( j) |> 0)

(1t)

x i ,∈,h,k ≤

y iho ,h,l ,k
,∈
y ive ,h,k ,t
,∈

∑

k −1
l =h

y iho ,h,l ,k +
,∈

∑

t∈I(Ti ,∈, h , k )

y ive ,h,k ,t
,∈

for all i, h ≤ k ∈ ch(i)
1
≤ ( x i ,∈,h,l + x i ,∈,l + 1, k)
2
1
≤ ( x i ,t ,h,k + x t ,∈,lch(t ),rch(t ) )
2

x i , j ,h , k ≤

∑

k −1
l =h

y iho,h,l ,k +
,j

∑

t∈an( j)−{i}

(2 − 3u)
(2u)
(3u)
y ivej ,h,k ,t
,
(2 − 3t )

for all i, j ∈ I(Ti ,∈,h,k ), h ≤ k ∈ ch(i)
y iho,h,l ,k
,j
y iho,h,l ,k
,j
y ivej ,h,k ,t
,
zu ≥

1
n

1
≤ ( x i ,∈,h,l + x i , j ,l + 1, k)
2
1
≤ ( x i , j ,h,l + x i ,∈,l + 1, k)
2
1
≤ ( x i ,t ,h,k + x t , j ,lch(t ),rch(t ) )
2

∑

{i , j ,h ,k:es(Ti , j , h , k )= u}

u

zu = m

(2t ’)
(3t )

x i , j ,h , k

for all distinct Euler strings u of Ti , j ,h,k

∑

(2t )

(4)
(5)

where I(Ti,Î,h,k) denotes a set of internal vertices that
are vertices (neither root or leaves) in T i,Î,h,k, an(t)

gram, each variable of x i,j,h,k , y iho,h,l ,k , y ivej ,h,k ,t and z u
,j
,
takes either 0 or 1. Each xi,j,h,k corresponds to subtree Ti,j,
h,k, and xi,j,h,k = 1 iff there exists a nonterminal Ai,j,h,k in
G that generates Ti,j,h,k. zu = 1 iff there exists a nonterminal symbol in G that generates subtree u of T(V, E). The
meaning of each (in)equality is as follows (Figure 4):
(1u,t) each untagged (tagged) edge Ti,Î,j,j (Ti,j,j,j) must
be generated,
(2-3u,t) if Ai,j,h,k appears in G either for at least some
l, Ai,j,h,k ® Ai,j,h,lAi,j,l+1,k Î G, or, for at least some t, Ai,j,
ho
h,k ® Ai,t,h,lAt,j,lch(t),rch(t) Î G holds. y i , j ,h ,l ,k = 1 means that
Ti,j,h,k is horizontally divided at root i into the children
{s Î ch(i)|s ≤ l} and {s Î ch(i)|s > l}. y ivej ,h,k ,t = 1 means
,
that Ti,j,h,k is vertically divided at t into two subtrees Ti,t,
and Tt,j,lch(t),rch(t) (if j ≠ Î, t must be in an(j), otherwise, a divided tree would have two tags),
(4) A i,j,h,k and Ai,,j,h,k’ are identified if both generate
the same Euler string u, and
(5) the number of nonterminal symbols used in G
must be m.

h,k

IP formulation for unordered trees
In some cases, a given ordered tree is not well compressed. Figure 5 shows an example of such a tree T(V,
E), where edges (1, 2),(1, 3),(1, 6),(3, 4), and (3, 5) Î E
are labeled with a,c,b,a, and b, respectively. A subtree
T3,Î,4,5 is the same as a subtree with root i. However, we
cannot divide the tree into such a subtree and the
remaining part, as in the figure, according to production
rules in EOTGs. Therefore, we need to extend the
above IP for the ordered trees to that for the unordered
trees. For this purpose, we extend the EOTG to a grammar for the unordered trees, called the elementary unordered tree grammar (EUTG) [10], and use a simple
EUTG for rooted unordered tree compression.
A simple EUTG (SEUTG) is defined as 4-tuple (Σ, Γ,
S, Δ) in a similar way to EOTG. A set of production
rules Δ is also the same as that of EOTG (Figure 2),
except that trees appeared in the production rules are
dealt as unordered trees. In other words, there is no sibling relationship between children B and C in the rules
(R2u,t). Therefore, we must consider the subtrees of T
(V, E) as Ti,t,C (Figure 6), where C (≠ ∅) is a subset of
the children of i. Although ch(i) is considered to be the
sequence of children of i for the ordered trees, we allow
it be a set of the children of i for the unordered trees.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

(R2u,t)

Page 5 of 11

i
l

h

i

A
l+1

k

h

j

i

B

C

l l+1

k

j
i

(R3u,t)

i

A

h

B

C

h

k

k

t

t
j

t

j
Figure 4 Illustration for bisections of the tagged and untagged ordered trees for the production rules Illustration for bisections of the
tagged and untagged ordered trees for the production rules (R2u,t) and (R3u,t) of simple EOTG. A, B, and C correspond to nonterminal symbols
in the production rules of Figure 2.

Thus, within the class of SEUTGs, we define the minimum SEUTG problem as follows:
Input: Rooted unordered tree T(V, E) and integer m,
where V is a set of vertices and E is a set of labeled
edges.
Output: Simple EUTG with m nonterminal symbols
that generates only T.
We must identify unordered subtrees to count the
number of nonterminal symbols m. For this purpose, we
also use the Euler strings es(T) for the unordered trees
T as in the minimum SEOTG. First, the unordered tree
T is transformed into the ordered tree T’ as follows.
The children of each vertex in T are sorted by labels,
and if it contains a tag, the tag is moved to the first of
the children. Next, es(T) is calculated to be es(T’).
Thus, this problem is transformed into the following
integer program, where x 1,Î,ch(1) = 1 holds iff there
exists a required EUTG G:
Maximize x1,Î,ch(1)

1
2
4

3
a

b

5

6

2

a

for all i, j ∈ ch(i) (| ch( j) | = 0)

(1u)

for all i, j ∈ ch(i) (| ch( j) | > 0)

(1t )

x i ,∈,C ≤

∑

C1 ( ≠f)⊂ C

y iho ,C1 ,C −C1 +
,∈

b

6
4

3
a

∑

t∈I(Ti ,∈,C )

y ive ,C ,t
,∈

for all i, C ⊆ ch(i)
y iho ,C1 ,C 2 ≤
,∈
y ive ,C ,t ≤
,∈
x i , j ,C ≤

(2u)

1
( x i ,t ,C + x t ,∈,ch(t ) )
2

∑

(2 − 3u)

1
( x i ,∈,C1 + x i ,∈,C 2 )
2

C1 ( ≠f)⊂ C

y iho,C1 ,C −C1
,j

(3u)
+

∑

t∈an( j)−{i}

y ivej ,C ,t
,

for all i, j ∈ I(Ti ,∈,C ), C ⊆ ch(i)

(2 − 3t )

1
≤ ( x i , j ,C1 + x i ,∈,C 2 )( j ∈ Ti ,∈,C1 )
2
1
y ivej ,C ,t ≤ ( x i ,t ,C + x t , j ,ch(t ) )
,
2
1
Zu ≥
x i , j ,C
{i , j ,C :es(Ti , j , c )= u}
n
for all distinct Euler strings u of Ti , j ,C
i
y ih,o,C1 ,C 2
j

(2t )
(3t )

∑

∑

u

zu = m

(4)
(5)

Computational experiments
We implemented the above mentioned IP-based methods for the ordered and unordered trees to perform
some computational experiments. We used ILOG

1

1
c b

x i ,∈,{ j} = 1
x i , j ,{ j} = 1

Minimum SEUTG

a

Subject to

i

c
b

ck

c1
5

Figure 5 Example of an ordered tree that is not well
compressed The left ordered tree cannot be divided into the
two right trees. However, this is possible if the left tree is an
unordered tree.

t
Figure 6 Example of the unordered tree T i,t,C Example of the
unordered tree Ti,t,C with a set of children of i, C = {c1 , ..., ck}.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

Page 6 of 11

T1,Î,2,6 ® T1,Î,2,2T1,Î,3,6 (1)
T1,Î,3,6 ® T1,Î,3,3T1,Î,6,6 (2)
T1,Î,3,3 ® T1,3,3,3T3,Î,4,5 (3)
T3,Î,4,5 ® T3,Î,4,4T3,Î,5,5. (4)
The production rules of this tree compression are also
shown in Figure 7. The elapsed time to solve the IP was
0.014 s.
When T was regarded as an unordered tree, we generated the integer program with 14 nonterminal symbols
for 12 horizontal and 4 vertical divisions. The minimum
number of nonterminal symbols of T is 6 (Figure 8).
The minimum grammar was constructed as follows.
T1,Î,2,3,6 ® T1,Î,3T1,Î,2,6 (5)
T1,Î,3 ® T1,3,3T3,Î,4,5 (6)
T1,Î,2,6 ® T1,Î,2T1,Î,6 (7)
T3,Î,4,5 ® T3,Î,4T3,Î,5. (8)
The production rules of this tree compression of T are
also shown in Figure 8. The elapsed time to solve the IP
was 0.016 s.
In addition to this simple example, we performed
experiments for two types of trees with more vertices
(Figure 9), where the number of vertices and degree was
up to 61 and 20, respectively, and measured the elapsed
times. Type A trees only contain vertices with the
degree at most two and edges labeled with a, while
Type B trees contain edges labeled with a and b, and
the height is two. Table 1 shows the results on the
elapsed time (seconds) to solve the minimum SEOTG
and SEUTG problems by using CPLEX for the ordered
and unordered trees of Type A and B with several sizes.
m was the same as the minimum number of nonterminal symbols, except the case of Type A trees with 51

CPLEX (version 11.2, http://www.ilog.com/products/
cplex/) to solve the integer programs. All of the computational experiments were conducted on a PC with a
Xeon CPU 3.33 GHz and 10 GB RAM running under
the LINUX OS. In our implementation, we first transformed the minimum grammar problem of the ordered
and unordered trees into the integer programs. Next, we
used ILOG CPLEX, and obtained the number of nonterminal symbols needed in the minimum grammars of
this tree compression. Finally, as the results, the minimum grammars for the tree compression were constructed from the solution of the IP. We also tested the
computational time of solving these integer programs.
We performed experiments on both artificial data and
the glycan tree-structure data, and compared our proposed methods with an existing method.
Artificial data

We chose the left tree T of Figure 5 in which edges
labeled with “a” and “b” are connected to both endpoints of an edge labeled with “c”, and performed computational experiments, where the simple tree T was
treated either as an ordered or an unordered tree. When
T was regarded as an ordered tree, we generated the
integer program with 13 nonterminal symbols for 9 horizontal and 4 vertical divisions. The number of nonterminal symbols needed in the minimum grammar of
T is 7 because the number of production rules except
(R1u,t) is 4 and the number of terminal symbols is 3.
(Figure 7, in which nonterminal symbols, S,A,..., and F
are used). The minimum grammar constructed from the
solution of IP is as follows.

(A)

S

1
2
4

a
3

c b

a

b

6

3

5

4

2
S

A

1 C

c b

a
A

(B)

B

1

b

6

3

5

4

a

a

B

b

1

1

b

C

B

F
3

c
5

D
6

D

C

4

a

b
1
3
E

c

5

E

F

4

A
3
a
D

3

b

A

5
D

F
A

a

D

b

E

c

Figure 7 Production rules generated by our IP-based method for the minimum SEOTG (A) Derivation of production rules generated by
our IP-based method for the minimum SEOTG. (B) Production rules generated by our IP-based method for the minimum SEOTG.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

(A)

S

1

2
4

a

1 C

c b

3

Page 7 of 11

a

b

6

3

5

4

S

a

b

F
a

F

C

5 4

a

b
1

1

C

2
(B)

F
3

c

b

6

3
E

c

E

F

5

4

A
3
a

3

D
b

A

5

D

F
a

A

b

D

E

c

Figure 8 Production rules generated by our IP-based method for the minimum SEUTG (A) Derivation of production rules generated by
our IP-based method for the minimum SEUTG. (B) Production rules generated by our IP-based method for the minimum SEUTG.

and sufficient time is not given, the IP-based method for
ordered trees should be used. It is because solving the
minimum SEUTG problem for such trees may take too
much time whereas the method for ordered trees is
expected in many cases to provide a small grammar
whose size is close to or the same as that of the smallest
grammar obtained by the method for unordered trees.

vertices. In these cases, CPLEX did not output the solution for m = 11 within 8 h. However, we were able to
generate the production rules for m = 12, although 10 is
the minimum number of nonterminal symbols. If we do
not need the minimum grammar, then we can obtain
the production rules faster than in the case of finding
the minimum grammar. Furthermore, the results show
that the elapsed time for an ordered Type A tree was
almost the same as that for the corresponding unordered tree, and the time for an ordered Type B tree was
shorter than that for the corresponding unordered tree.
Even for the ordered tree with 61 vertices, the time was
a few minutes. These results suggest that our proposed
method is efficient for ordered trees. These results also
suggest that the IP-based method for unordered trees
should be used when sibling relationships do not have
any meanings and the number of vertices and the maximum degree are not so large because the minimum
SEUTG size is always smaller than the minimum
SEOTG size. However, if the maximum degree is large

(A) a

Glycan tree-structure data

It is known that glycans play important roles in a cell
such as cellular adhesion and antigen-antibody reaction.
Therefore, it is important to analyze structures of glycans. Hizukuri et al. extracted characteristic functional
motifs of glycans, predicted a leukemia specific glycan
motif, and confirmed by biological experiments that the
Agrocybe cylindracea galectin specifically recognized
human leukemic cells [11]. Thus, it is also important to
find motifs and repeated patterns of glycans. We
obtained twelve glycans, G02703, G03655, G03710,
G04045, G04458, G04666, G04859, G05058, G05256,

(B)

a

a

a

b b

b

a a

a

b

a
Figure 9 Trees used in experiments for evaluation of our IP-based methods (A) Trees having only vertices with degree at the most two. (B)
Trees having vertices with degree more than two.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

Page 8 of 11

Table 1 Results on the elapsed time (seconds) for
ordered and unordered trees of type A and B
tree type

max degree

# vertices

ordered

unordered

m

time

m

time

A

2

11

7

0.021

7

0.019

A

2

31

10

302.74

10

329.20

A

2

41

10

8063.19

10

7730.64

A

2

51

12*

230.51

12*

233.44

B

3

7

9

0.011

8

0.010

B

6

19

11

0.185

10

1.108

B

8

25

11

1.404

10

26440.01

B

10

31

12

2.265

-

-

B

16

49

11

481.15

-

-

432.72

-

-

B

20

61

13

Results on the elapsed time (seconds) for ordered and unordered trees of
type A and B (in Figure 9) with several sizes. m was the same as the
minimum number of nonterminal symbols for each tree, except the case
denoted by ’*’. ’-’ denotes that the solver took more than 8 hours.

G05552, G06867, and G09054 as rooted trees from the
KEGG Glycan database [12]. We labeled each edge with
a lower-case letter corresponding to the type of sugar of
the lower endpoint, because the edges are not labeled in
the original data. For each glycan, the maximum degree,
the number of vertices, and the number of distinct
labels are shown in Table 2. Then, we applied our proposed IP-based method for SEUTG to each glycan as an
unordered tree, and obtained the production rules. Figures 10, 11, 12, and 13 show extracted patterns from
the production rules of G03655, G04458, G04666, and
G05058. We can see from the result of the generated
production rule that the tree of G03655 contains 2 of

the same subtrees with 4 vertices and 3 of the same
subtrees with 5 vertices, the tree of G04458 contains 2
of the same subtrees with 8 vertices and the subtree
contains 3 of the same subtrees with 3 vertices, the tree
of G04666 contains 3 of the same subtrees with 5 vertices and 2 of the same subtree with 3 vertices, and the
tree of G05058 contains 3 of the same subtrees with 6
vertices and 2 of the same subtrees with 5 vertices. We
were able to extract patterns similar to those of G03655,
G04458, G04666, G05058 for the other glycans. The
detailed derivation diagrams of production rules for the
four glycans are available on our supplementary web
site (http://sunflower.kuicr.kyoto-u.ac.jp/morihiro/treegram/).
We compared the results of the grammar size for the
minimum SEOTG and SEUTG by our methods with
those of an existing method, TREE-BISECTION [10].
TREE-BISECTION repeatedly divides a given tree horizontally and vertically such that the size of a divided
subtree is similar to that of another subtree until each
subtree consists of an edge. It is known that TREEBISECTION computes in polynomial time a simple
EOTG of size O(mn5/6) [10], where m is the size of the
minimum simple EOTG and n is the number of vertices of the given tree. Table 2 shows the results of the
grammar size and the elapsed time by our proposed
IP-based methods for the minimum SEOTG and
SEUTG problems, and TREE-BISECTION. The minimum SEOTG size was the same as that of the minimum SEUTG for each glycan except G05552 because
the tree contains vertices only with at most two children, and all subtrees of a vertex having three children
are isomorphic. The size of the grammar generated by

Table 2 Statistics of glycans, G02703, G03655, G03710, G04045, G04458, G04666, G04859, G05058,G05256, G05552,
G06867, and G09054, and results on the grammar size
glycan

max degree

# vertices

# distinct labels

Min SEOTG

Min SEUTG

TREE-BISECTION

size

time

size

time

size

time

G02703

3

26

3

22

3.68

22

2.9

32

0.001

G03655

3

34

3

47

0.96

47

2.32

49

0.001

G03710

3

28

3

20

0.47

20

0.51

20

0.001

G04045

3

36

3

20

1.77

20

1.98

22

0.001

G04458

3

21

2

16

1.55

16

0.69

36

0.001

G04666

3

20

4

25

1.41

25

0.94

33

0.001

G04859

3

19

5

27

0.12

27

0.25

29

0.001

G05058

3

25

5

26

3.03

26

66.28

36

0.001

G05256

3

25

2

19

3.14

19

3.98

29

0.001

G05552

3

19

5

27

0.66

23

0.23

27

0.001

G06867

3

28

3

22

2.22

22

6.46

26

0.001

G09054

4

31

5

29

2.81

29

6.71

29

0.001

Statistics of glycans, G02703, G03655, G03710, G04045, G04458, G04666, G04859, G05058, G05256, G05552, G06867, and G09054, and results on the grammar
size and the elapsed time (seconds) by our proposed IP-based methods for the minimum SEOTG and SEUTG problems, and TREE-BISECTION [10].

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

G03655

Page 9 of 11

b
b

b
b

b

b

b

b
b

b

b

b

b

b

c

c

b

b

b

b

b
b

b

b

b

b

b

b

b

a

b

b
c

b
b

c

b

b

b

b

Figure 10 Extracted patterns from glycan G03655 The label related with the lower endpoint is attached to each edge. Labels, a, b, and c
denote GlcNAc, Man, and P, respectively.

a

G04458

a
a
a
a
a
a
a

a

b

b

b

b

b

b

b

b

b

b

a
a

b

a
a

b

b

b

b

b
Figure 11 Extracted patterns from glycan G04458 The label related with the lower endpoint is attached to each edge. Labels, a, and b
denote Xyl, and Glc, respectively.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

Page 10 of 11

G04666

a

b
c

a
a

b

b

c

c

c

c

d

d

d

d

d

c

d

d

b

a

c

c

d

d
Figure 12 Extracted patterns from glycan G04666 The label related with the lower endpoint is attached to each edge. Labels, a, b, c, and d
denote LFuc, Gal, Xyl, and Glc, respectively.

G05058
a
c

a

a

d

b

a
e

a

a

b
c

a
a

d

b

a
a

e

b
c

a
c

d

a
b

a
b

d

a
e

a
b

Figure 13 Extracted patterns from glycan G05058 The label related with the lower endpoint is attached to each edge. Labels, a, b, c, d, and
e denote Glc, Man6Ac, Man, GlcA, and 3-en-eryHexA, respectively.

Zhao et al. BMC Bioinformatics 2010, 11(Suppl 11):S4
http://www.biomedcentral.com/1471-2105-11-S11

our methods was always smaller than or equal to that
by TREE-BISECTION, and the ratio was 1.0 (G09054)
to 2.25 (G04458). This result shows that our proposed
method performs better with the compression ratio
than TREE-BISECTION.

Conclusions
We proposed integer programming-based methods for
finding the minimum grammars to generate given
strings, ordered trees, and unordered trees. By conducting computational experiments, we confirmed that our
IP formulations work correctly. The results also show
that our IP-based grammar compression is efficient for
ordered trees, although some improvements are
required for unordered trees.
We applied our proposed method to glycan treestructure data, and extracted interesting patterns.
Although these patterns were obtained from production
rules generated for a single tree, we may be able to
extract common patterns and rules from multiple glycans by extending our methods to find minimum grammars to generate given forests.
In this paper, we dealt with grammars for trees. However, real structured data often contain some cycles.
Therefore, we are in the process of developing IP-based
methods for more complex structured data.

Page 11 of 11

6.

Sakamoto H, Maruyama S, Kida T, Shimozono S: A space-saving
approximation algorithm for grammar-based compression. IEICE
Transactions on Information and Systems 2009, 92-D:158-165.
7. Busatto G, Lohrey M, Maneth S: Efficient memory representation of XML
document trees. Information Systems 2008, 33:456-474.
8. Murakami S, Doi K, Yamamoto A: Finding frequent patterns from
compressed tree-structure data. In Proc. 11th Int. Conf. Discovery Science
2008, 284-295.
9. Yamagata K, Uchida T, Shoudai T, Nakamura Y: An effective grammarbased compression algorithm for tree structured data. In Proc. 13th Int.
Inductive Logic Programming 2003, 383-400.
10. Akutsu T: A bisection algorithm for grammar-based compression of
ordered trees. Information Processing Letters 2010, 110:815-820.
11. Hizukuri Y, Yamanishi Y, Nakamura O, Yagi F, Goto S, Kanehisa M: Extraction
of leukemia specific glycan motifs in humans by computational
glycomics. Carbohydrate Research 2005, 340:2270-2278.
12. Hashimoto K, Goto S, Kawano S, Aoki-Kinoshita K, Ueda N, Hamajima M,
Kawasaki T, Kanehisa M: KEGG as a glycome informatics resource.
Glycobiology 2006, 16(5):63R-70R.
doi:10.1186/1471-2105-11-S11-S4
Cite this article as: Zhao et al.: Integer programming-based method for
grammar-based tree compression and its application to pattern
extraction of glycan tree structures. BMC Bioinformatics 2010
11(Suppl 11):S4.

Acknowledgements
This work was partially supported by Grants-in-Aid #22240009 and
#21700323 from MEXT, Japan.
This article has been published as part of BMC Bioinformatics Volume 11
Supplement 11, 2010: Proceedings of the 21st International Conference on
Genome Informatics (GIW2010). The full contents of the supplement are
available online at http://www.biomedcentral.com/1471-2105/11?issue=S11.
Authors contributions
TA gave the basic idea. YZ and MH developed and implemented the
algorithms, and carried out the experiments. YZ, MH, and TA authored and
approved the manuscript.
Competing interests
The authors declare that they have no competing interests.
Published: 14 December 2010
References
1. Li M, Badger J, Chen X, Kwong S, Kearney P, Zhang H: An informationbased sequence distance and its application to whole mitochondrial
genome phylogeny. Bioinformatics 2001, 17:149-154.
2. Hayashida M, Akutsu T: Image compression-based approach to
measuring the similarity of protein structures. In Proc. 6th Asia-Pacific
Bioinformatics Conference 2008, 221-230.
3. Hayashida M, Akutsu T: Comparing biological networks via graph
compression. BMC Systems Biology 2010, 4(Supp 2):S13.
4. Charikar M, Lehman E, Liu D, Panigrahy R, Prabhakaran M, Sahai A, Shelat A:
The smallest grammar problem. IEEE Transactions on Information Theory
2005, 51:2554-2576.
5. Rytter W: Application of Lempel-Ziv factorization to the approximation of
grammar-based compression. Theoretical Computer Science 2003,
302:211-222.

Submit your next manuscript to BioMed Central
and take full advantage of:
• Convenient online submission
• Thorough peer review
• No space constraints or color ﬁgure charges
• Immediate publication on acceptance
• Inclusion in PubMed, CAS, Scopus and Google Scholar
• Research which is freely available for redistribution
Submit your manuscript at
www.biomedcentral.com/submit

</pre>
</body>
</html>
